/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/coreui.bundle.js":
/*!***************************************!*\
  !*** ./resources/js/coreui.bundle.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n  * CoreUI v3.4.0 (https://coreui.io)\r\n  * Copyright 2020 creativeLabs ≈Åukasz Holeczek\r\n  * Licensed under MIT (https://coreui.io)\r\n  */\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function () {\n  'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.0-alpha1): util/index.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  var MAX_UID = 1000000;\n  var MILLISECONDS_MULTIPLIER = 1000;\n  var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  var toType = function toType(obj) {\n    if (obj === null || obj === undefined) {\n      return \"\" + obj;\n    }\n\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  };\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Public Util Api\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  var getUID = function getUID(prefix) {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  var getSelector = function getSelector(element) {\n    var selector = element.getAttribute('data-target');\n\n    if (!selector || selector === '#') {\n      var hrefAttr = element.getAttribute('href');\n      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n    }\n\n    return selector;\n  };\n\n  var getSelectorFromElement = function getSelectorFromElement(element) {\n    var selector = getSelector(element);\n\n    if (selector) {\n      return document.querySelector(selector) ? selector : null;\n    }\n\n    return null;\n  };\n\n  var getElementFromSelector = function getElementFromSelector(element) {\n    var selector = getSelector(element);\n    return selector ? document.querySelector(selector) : null;\n  };\n\n  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n\n    var _window$getComputedSt = window.getComputedStyle(element),\n        transitionDuration = _window$getComputedSt.transitionDuration,\n        transitionDelay = _window$getComputedSt.transitionDelay;\n\n    var floatTransitionDuration = parseFloat(transitionDuration);\n    var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n\n  var triggerTransitionEnd = function triggerTransitionEnd(element) {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n\n  var isElement = function isElement(obj) {\n    return (obj[0] || obj).nodeType;\n  };\n\n  var emulateTransitionEnd = function emulateTransitionEnd(element, duration) {\n    var called = false;\n    var durationPadding = 5;\n    var emulatedDuration = duration + durationPadding;\n\n    function listener() {\n      called = true;\n      element.removeEventListener(TRANSITION_END, listener);\n    }\n\n    element.addEventListener(TRANSITION_END, listener);\n    setTimeout(function () {\n      if (!called) {\n        triggerTransitionEnd(element);\n      }\n    }, emulatedDuration);\n  };\n\n  var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {\n    Object.keys(configTypes).forEach(function (property) {\n      var expectedTypes = configTypes[property];\n      var value = config[property];\n      var valueType = value && isElement(value) ? 'element' : toType(value);\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new Error(componentName.toUpperCase() + \": \" + (\"Option \\\"\" + property + \"\\\" provided type \\\"\" + valueType + \"\\\" \") + (\"but expected type \\\"\" + expectedTypes + \"\\\".\"));\n      }\n    });\n  };\n\n  var isVisible = function isVisible(element) {\n    if (!element) {\n      return false;\n    }\n\n    if (element.style && element.parentNode && element.parentNode.style) {\n      var elementStyle = getComputedStyle(element);\n      var parentNodeStyle = getComputedStyle(element.parentNode);\n      return elementStyle.display !== 'none' && parentNodeStyle.display !== 'none' && elementStyle.visibility !== 'hidden';\n    }\n\n    return false;\n  };\n\n  var findShadowRoot = function findShadowRoot(element) {\n    if (!document.documentElement.attachShadow) {\n      return null;\n    } // Can find the shadow root otherwise it'll return the document\n\n\n    if (typeof element.getRootNode === 'function') {\n      var root = element.getRootNode();\n      return root instanceof ShadowRoot ? root : null;\n    }\n\n    if (element instanceof ShadowRoot) {\n      return element;\n    } // when we don't find a shadow root\n\n\n    if (!element.parentNode) {\n      return null;\n    }\n\n    return findShadowRoot(element.parentNode);\n  };\n\n  var noop = function noop() {\n    return function () {};\n  };\n\n  var reflow = function reflow(element) {\n    return element.offsetHeight;\n  };\n\n  var getjQuery = function getjQuery() {\n    var _window = window,\n        jQuery = _window.jQuery;\n\n    if (jQuery && !document.body.hasAttribute('data-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.0-alpha1): dom/data.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var mapData = function () {\n    var storeData = {};\n    var id = 1;\n    return {\n      set: function set(element, key, data) {\n        if (typeof element.key === 'undefined') {\n          element.key = {\n            key: key,\n            id: id\n          };\n          id++;\n        }\n\n        storeData[element.key.id] = data;\n      },\n      get: function get(element, key) {\n        if (!element || typeof element.key === 'undefined') {\n          return null;\n        }\n\n        var keyProperties = element.key;\n\n        if (keyProperties.key === key) {\n          return storeData[keyProperties.id];\n        }\n\n        return null;\n      },\n      \"delete\": function _delete(element, key) {\n        if (typeof element.key === 'undefined') {\n          return;\n        }\n\n        var keyProperties = element.key;\n\n        if (keyProperties.key === key) {\n          delete storeData[keyProperties.id];\n          delete element.key;\n        }\n      }\n    };\n  }();\n\n  var Data = {\n    setData: function setData(instance, key, data) {\n      mapData.set(instance, key, data);\n    },\n    getData: function getData(instance, key) {\n      return mapData.get(instance, key);\n    },\n    removeData: function removeData(instance, key) {\n      mapData[\"delete\"](instance, key);\n    }\n  };\n  /* istanbul ignore file */\n\n  var find = Element.prototype.querySelectorAll;\n  var findOne = Element.prototype.querySelector; // MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\n\n  var defaultPreventedPreservedOnDispatch = function () {\n    var e = new CustomEvent('Bootstrap', {\n      cancelable: true\n    });\n    var element = document.createElement('div');\n    element.addEventListener('Bootstrap', function () {\n      return null;\n    });\n    e.preventDefault();\n    element.dispatchEvent(e);\n    return e.defaultPrevented;\n  }();\n\n  var scopeSelectorRegex = /:scope\\b/;\n\n  var supportScopeQuery = function () {\n    var element = document.createElement('div');\n\n    try {\n      element.querySelectorAll(':scope *');\n    } catch (_) {\n      return false;\n    }\n\n    return true;\n  }();\n\n  if (!supportScopeQuery) {\n    find = function find(selector) {\n      if (!scopeSelectorRegex.test(selector)) {\n        return this.querySelectorAll(selector);\n      }\n\n      var hasId = Boolean(this.id);\n\n      if (!hasId) {\n        this.id = getUID('scope');\n      }\n\n      var nodeList = null;\n\n      try {\n        selector = selector.replace(scopeSelectorRegex, \"#\" + this.id);\n        nodeList = this.querySelectorAll(selector);\n      } finally {\n        if (!hasId) {\n          this.removeAttribute('id');\n        }\n      }\n\n      return nodeList;\n    };\n\n    findOne = function findOne(selector) {\n      if (!scopeSelectorRegex.test(selector)) {\n        return this.querySelector(selector);\n      }\n\n      var matches = find.call(this, selector);\n\n      if (typeof matches[0] !== 'undefined') {\n        return matches[0];\n      }\n\n      return null;\n    };\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.0-alpha1): dom/event-handler.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var $ = getjQuery();\n  var namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  var stripNameRegex = /\\..*/;\n  var stripUidRegex = /::\\d+$/;\n  var eventRegistry = {}; // Events storage\n\n  var uidEvent = 1;\n  var customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  var nativeEvents = ['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll'];\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Private methods\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && uid + \"::\" + uidEvent++ || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    var uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      event.delegateTarget = element;\n\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      var domElements = element.querySelectorAll(selector);\n\n      for (var target = event.target; target && target !== this; target = target.parentNode) {\n        for (var i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            event.delegateTarget = target;\n\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler, delegationSelector) {\n    if (delegationSelector === void 0) {\n      delegationSelector = null;\n    }\n\n    var uidEventList = Object.keys(events);\n\n    for (var i = 0, len = uidEventList.length; i < len; i++) {\n      var event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    var delegation = typeof handler === 'string';\n    var originalHandler = delegation ? delegationFn : handler; // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n\n    var typeEvent = originalTypeEvent.replace(stripNameRegex, '');\n    var custom = customEvents[typeEvent];\n\n    if (custom) {\n      typeEvent = custom;\n    }\n\n    var isNative = nativeEvents.indexOf(typeEvent) > -1;\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    }\n\n    var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),\n        delegation = _normalizeParams[0],\n        originalHandler = _normalizeParams[1],\n        typeEvent = _normalizeParams[2];\n\n    var events = getEvent(element);\n    var handlers = events[typeEvent] || (events[typeEvent] = {});\n    var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    var fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    var storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(function (handlerKey) {\n      if (handlerKey.indexOf(namespace) > -1) {\n        var event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  var EventHandler = {\n    on: function on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n    one: function one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n    off: function off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      var _normalizeParams2 = normalizeParams(originalTypeEvent, handler, delegationFn),\n          delegation = _normalizeParams2[0],\n          originalHandler = _normalizeParams2[1],\n          typeEvent = _normalizeParams2[2];\n\n      var inNamespace = typeEvent !== originalTypeEvent;\n      var events = getEvent(element);\n      var isNamespace = originalTypeEvent.charAt(0) === '.';\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(function (elementEvent) {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      var storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(function (keyHandlers) {\n        var handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.indexOf(handlerKey) > -1) {\n          var event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n    trigger: function trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      var typeEvent = event.replace(stripNameRegex, '');\n      var inNamespace = event !== typeEvent;\n      var isNative = nativeEvents.indexOf(typeEvent) > -1;\n      var jQueryEvent;\n      var bubbles = true;\n      var nativeDispatch = true;\n      var defaultPrevented = false;\n      var evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles: bubbles,\n          cancelable: true\n        });\n      } // merge custom information in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(function (key) {\n          Object.defineProperty(evt, key, {\n            get: function get() {\n              return args[key];\n            }\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n\n        if (!defaultPreventedPreservedOnDispatch) {\n          Object.defineProperty(evt, 'defaultPrevented', {\n            get: function get() {\n              return true;\n            }\n          });\n        }\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n  };\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var NAME = 'asyncLoad';\n  var VERSION = '3.2.2';\n  var DATA_KEY = 'coreui.asyncLoad';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var CLASS_NAME_ACTIVE = 'c-active';\n  var CLASS_NAME_NAV_DROPDOWN_TOGGLE = 'c-sidebar-nav-dropdown-toggle';\n  var CLASS_NAME_NAV_LINK = 'c-sidebar-nav-link';\n  var CLASS_NAME_SHOW = 'c-show';\n  var CLASS_NAME_VIEW_SCRIPT = 'view-script';\n  var EVENT_CLICK_DATA_API = \"click\" + EVENT_KEY + DATA_API_KEY;\n  var EVENT_XHR_STATUS = 'xhr';\n  var SELECTOR_NAV_DROPDOWN = '.c-sidebar-nav-dropdown';\n  var SELECTOR_NAV_LINK = '.c-xhr-link, .c-sidebar-nav-link';\n  var SELECTOR_NAV_ITEM = '.c-sidebar-nav-item';\n  var SELECTOR_VIEW_SCRIPT = '.view-script';\n  var Default = {\n    defaultPage: 'main.html',\n    errorPage: '404.html',\n    subpagesDirectory: 'views/'\n  };\n\n  var AsyncLoad = /*#__PURE__*/function () {\n    function AsyncLoad(element, config) {\n      this._config = this._getConfig(config);\n      this._element = element; // eslint-disable-next-line no-restricted-globals\n\n      var url = location.hash.replace(/^#/, ''); // eslint-disable-next-line no-negated-condition\n\n      if (url !== '') {\n        this._setUpUrl(url);\n      } else {\n        this._setUpUrl(this._config.defaultPage);\n      }\n\n      this._addEventListeners();\n    } // Getters\n\n\n    var _proto = AsyncLoad.prototype; // Private\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default), config);\n      return config;\n    };\n\n    _proto._loadPage = function _loadPage(url) {\n      var _this = this;\n\n      var element = this._element;\n      var config = this._config;\n\n      var loadScripts = function loadScripts(src, element) {\n        if (element === void 0) {\n          element = 0;\n        }\n\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = src[element];\n        script.className = CLASS_NAME_VIEW_SCRIPT; // eslint-disable-next-line no-multi-assign, unicorn/prefer-add-event-listener\n\n        script.onload = script.onreadystatechange = function () {\n          if (!_this.readyState || _this.readyState === 'complete') {\n            if (src.length > element + 1) {\n              loadScripts(src, element + 1);\n            }\n          }\n        };\n\n        var body = document.getElementsByTagName('body')[0];\n        body.appendChild(script);\n      };\n\n      var removeScripts = function removeScripts() {\n        var oldScripts = document.querySelectorAll(SELECTOR_VIEW_SCRIPT);\n\n        if (oldScripts.length) {\n          oldScripts.forEach(function (oldScript) {\n            oldScript.remove();\n          });\n        }\n      };\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', config.subpagesDirectory + url);\n      var event = new CustomEvent(EVENT_XHR_STATUS, {\n        detail: {\n          url: url,\n          status: xhr.status\n        }\n      });\n      element.dispatchEvent(event); // eslint-disable-next-line unicorn/prefer-add-event-listener\n\n      xhr.onload = function (result) {\n        if (xhr.status === 200) {\n          event = new CustomEvent(EVENT_XHR_STATUS, {\n            detail: {\n              url: url,\n              status: xhr.status\n            }\n          });\n          element.dispatchEvent(event);\n          var wrapper = document.createElement('div');\n          wrapper.innerHTML = result.target.response; // eslint-disable-next-line unicorn/prefer-spread\n\n          var scripts = Array.from(wrapper.querySelectorAll('script')).map(function (script) {\n            return script.attributes.getNamedItem('src').nodeValue;\n          });\n          wrapper.querySelectorAll('script').forEach(function (script) {\n            return script.remove(script);\n          });\n          window.scrollTo(0, 0);\n          element.innerHTML = '';\n          element.appendChild(wrapper);\n          removeScripts();\n\n          if (scripts.length) {\n            loadScripts(scripts);\n          }\n\n          window.location.hash = url;\n        } else {\n          window.location.href = config.errorPage;\n        }\n      };\n\n      xhr.send();\n    };\n\n    _proto._setUpUrl = function _setUpUrl(url) {\n      url = url.replace(/^\\//, '').split('?')[0]; // eslint-disable-next-line unicorn/prefer-spread\n\n      Array.from(document.querySelectorAll(SELECTOR_NAV_LINK)).forEach(function (element) {\n        element.classList.remove(CLASS_NAME_ACTIVE);\n      }); // eslint-disable-next-line unicorn/prefer-spread\n\n      Array.from(document.querySelectorAll(SELECTOR_NAV_LINK)).forEach(function (element) {\n        element.classList.remove(CLASS_NAME_ACTIVE);\n      }); // eslint-disable-next-line unicorn/prefer-spread\n\n      Array.from(document.querySelectorAll(SELECTOR_NAV_DROPDOWN)).forEach(function (element) {\n        element.classList.remove(CLASS_NAME_SHOW);\n      }); // eslint-disable-next-line unicorn/prefer-spread\n\n      Array.from(document.querySelectorAll(SELECTOR_NAV_DROPDOWN)).forEach(function (element) {\n        // eslint-disable-next-line unicorn/prefer-spread\n        if (Array.from(element.querySelectorAll(\"a[href*=\\\"\" + url + \"\\\"]\")).length > 0) {\n          element.classList.add(CLASS_NAME_SHOW);\n        }\n      }); // eslint-disable-next-line unicorn/prefer-spread\n\n      Array.from(document.querySelectorAll(SELECTOR_NAV_ITEM + \" a[href*=\\\"\" + url + \"\\\"]\")).forEach(function (element) {\n        element.classList.add(CLASS_NAME_ACTIVE);\n      });\n\n      this._loadPage(url);\n    };\n\n    _proto._loadBlank = function _loadBlank(url) {\n      window.open(url);\n    };\n\n    _proto._loadTop = function _loadTop(url) {\n      window.location = url;\n    };\n\n    _proto._update = function _update(link) {\n      if (link.href !== '#') {\n        if (typeof link.dataset.toggle === 'undefined' || link.dataset.toggle === 'null') {\n          if (link.target === '_top') {\n            this._loadTop(link.href);\n          } else if (link.target === '_blank') {\n            this._loadBlank(link.href);\n          } else {\n            this._setUpUrl(link.getAttribute('href'));\n          }\n        }\n      }\n    };\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this2 = this;\n\n      EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_NAV_LINK, function (event) {\n        event.preventDefault();\n        var link = event.target;\n\n        if (!link.classList.contains(CLASS_NAME_NAV_LINK)) {\n          link = link.closest(SELECTOR_NAV_LINK);\n        }\n\n        if (!link.classList.contains(CLASS_NAME_NAV_DROPDOWN_TOGGLE) && link.getAttribute('href') !== '#') {\n          _this2._update(link);\n        }\n      });\n    } // Static\n    ;\n\n    AsyncLoad._asyncLoadInterface = function _asyncLoadInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY);\n\n      var _config = _typeof(config) === 'object' && config;\n\n      if (!data) {\n        data = new AsyncLoad(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    AsyncLoad.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        AsyncLoad._asyncLoadInterface(this, config);\n      });\n    };\n\n    _createClass(AsyncLoad, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return AsyncLoad;\n  }();\n\n  var $$1 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .asyncLoad to jQuery only if jQuery is present\r\n   */\n\n  if ($$1) {\n    var JQUERY_NO_CONFLICT = $$1.fn[NAME];\n    $$1.fn[NAME] = AsyncLoad.jQueryInterface;\n    $$1.fn[NAME].Constructor = AsyncLoad;\n\n    $$1.fn[NAME].noConflict = function () {\n      $$1.fn[NAME] = JQUERY_NO_CONFLICT;\n      return AsyncLoad.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$1 = 'alert';\n  var VERSION$1 = '3.2.2';\n  var DATA_KEY$1 = 'coreui.alert';\n  var EVENT_KEY$1 = \".\" + DATA_KEY$1;\n  var DATA_API_KEY$1 = '.data-api';\n  var SELECTOR_DISMISS = '[data-dismiss=\"alert\"]';\n  var EVENT_CLOSE = \"close\" + EVENT_KEY$1;\n  var EVENT_CLOSED = \"closed\" + EVENT_KEY$1;\n  var EVENT_CLICK_DATA_API$1 = \"click\" + EVENT_KEY$1 + DATA_API_KEY$1;\n  var CLASSNAME_ALERT = 'alert';\n  var CLASSNAME_FADE = 'fade';\n  var CLASSNAME_SHOW = 'show';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Alert = /*#__PURE__*/function () {\n    function Alert(element) {\n      this._element = element;\n\n      if (this._element) {\n        Data.setData(element, DATA_KEY$1, this);\n      }\n    } // Getters\n\n\n    var _proto = Alert.prototype; // Public\n\n    _proto.close = function close(element) {\n      var rootElement = element ? this._getRootElement(element) : this._element;\n\n      var customEvent = this._triggerCloseEvent(rootElement);\n\n      if (customEvent === null || customEvent.defaultPrevented) {\n        return;\n      }\n\n      this._removeElement(rootElement);\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$1);\n      this._element = null;\n    } // Private\n    ;\n\n    _proto._getRootElement = function _getRootElement(element) {\n      return getElementFromSelector(element) || element.closest(\".\" + CLASSNAME_ALERT);\n    };\n\n    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {\n      return EventHandler.trigger(element, EVENT_CLOSE);\n    };\n\n    _proto._removeElement = function _removeElement(element) {\n      var _this = this;\n\n      element.classList.remove(CLASSNAME_SHOW);\n\n      if (!element.classList.contains(CLASSNAME_FADE)) {\n        this._destroyElement(element);\n\n        return;\n      }\n\n      var transitionDuration = getTransitionDurationFromElement(element);\n      EventHandler.one(element, TRANSITION_END, function () {\n        return _this._destroyElement(element);\n      });\n      emulateTransitionEnd(element, transitionDuration);\n    };\n\n    _proto._destroyElement = function _destroyElement(element) {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n\n      EventHandler.trigger(element, EVENT_CLOSED);\n    } // Static\n    ;\n\n    Alert.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$1);\n\n        if (!data) {\n          data = new Alert(this);\n        }\n\n        if (config === 'close') {\n          data[config](this);\n        }\n      });\n    };\n\n    Alert.handleDismiss = function handleDismiss(alertInstance) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        alertInstance.close(this);\n      };\n    };\n\n    Alert.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$1);\n    };\n\n    _createClass(Alert, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$1;\n      }\n    }]);\n\n    return Alert;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DISMISS, Alert.handleDismiss(new Alert()));\n  var $$2 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .alert to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$2) {\n    var JQUERY_NO_CONFLICT$1 = $$2.fn[NAME$1];\n    $$2.fn[NAME$1] = Alert.jQueryInterface;\n    $$2.fn[NAME$1].Constructor = Alert;\n\n    $$2.fn[NAME$1].noConflict = function () {\n      $$2.fn[NAME$1] = JQUERY_NO_CONFLICT$1;\n      return Alert.jQueryInterface;\n    };\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.0-alpha1): dom/selector-engine.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NODE_TEXT = 3;\n  var SelectorEngine = {\n    matches: function matches(element, selector) {\n      return element.matches(selector);\n    },\n    find: function find$1(selector, element) {\n      var _ref;\n\n      if (element === void 0) {\n        element = document.documentElement;\n      }\n\n      return (_ref = []).concat.apply(_ref, find.call(element, selector));\n    },\n    findOne: function findOne$1(selector, element) {\n      if (element === void 0) {\n        element = document.documentElement;\n      }\n\n      return findOne.call(element, selector);\n    },\n    children: function children(element, selector) {\n      var _ref2;\n\n      var children = (_ref2 = []).concat.apply(_ref2, element.children);\n\n      return children.filter(function (child) {\n        return child.matches(selector);\n      });\n    },\n    parents: function parents(element, selector) {\n      var parents = [];\n      var ancestor = element.parentNode;\n\n      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n        if (this.matches(ancestor, selector)) {\n          parents.push(ancestor);\n        }\n\n        ancestor = ancestor.parentNode;\n      }\n\n      return parents;\n    },\n    prev: function prev(element, selector) {\n      var previous = element.previousElementSibling;\n\n      while (previous) {\n        if (previous.matches(selector)) {\n          return [previous];\n        }\n\n        previous = previous.previousElementSibling;\n      }\n\n      return [];\n    },\n    next: function next(element, selector) {\n      var next = element.nextElementSibling;\n\n      while (next) {\n        if (this.matches(next, selector)) {\n          return [next];\n        }\n\n        next = next.nextElementSibling;\n      }\n\n      return [];\n    }\n  };\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var NAME$2 = 'button';\n  var VERSION$2 = '3.2.2';\n  var DATA_KEY$2 = 'coreui.button';\n  var EVENT_KEY$2 = \".\" + DATA_KEY$2;\n  var DATA_API_KEY$2 = '.data-api';\n  var CLASS_NAME_ACTIVE$1 = 'active';\n  var CLASS_NAME_DISABLED = 'disabled';\n  var CLASS_NAME_FOCUS = 'focus';\n  var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]';\n  var SELECTOR_DATA_TOGGLE = '[data-toggle=\"buttons\"]';\n  var SELECTOR_INPUT = 'input:not([type=\"hidden\"])';\n  var SELECTOR_ACTIVE = '.active';\n  var SELECTOR_BUTTON = '.btn';\n  var EVENT_CLICK_DATA_API$2 = \"click\" + EVENT_KEY$2 + DATA_API_KEY$2;\n  var EVENT_FOCUS_DATA_API = \"focus\" + EVENT_KEY$2 + DATA_API_KEY$2;\n  var EVENT_BLUR_DATA_API = \"blur\" + EVENT_KEY$2 + DATA_API_KEY$2;\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Button = /*#__PURE__*/function () {\n    function Button(element) {\n      this._element = element;\n      Data.setData(element, DATA_KEY$2, this);\n    } // Getters\n\n\n    var _proto = Button.prototype; // Public\n\n    _proto.toggle = function toggle() {\n      var triggerChangeEvent = true;\n      var addAriaPressed = true;\n\n      var rootElement = this._element.closest(SELECTOR_DATA_TOGGLE);\n\n      if (rootElement) {\n        var input = SelectorEngine.findOne(SELECTOR_INPUT, this._element);\n\n        if (input && input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE$1)) {\n            triggerChangeEvent = false;\n          } else {\n            var activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE, rootElement);\n\n            if (activeElement) {\n              activeElement.classList.remove(CLASS_NAME_ACTIVE$1);\n            }\n          }\n\n          if (triggerChangeEvent) {\n            if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains(CLASS_NAME_DISABLED) || rootElement.classList.contains(CLASS_NAME_DISABLED)) {\n              return;\n            }\n\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE$1);\n            EventHandler.trigger(input, 'change');\n          }\n\n          input.focus();\n          addAriaPressed = false;\n        }\n      }\n\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE$1));\n      }\n\n      if (triggerChangeEvent) {\n        this._element.classList.toggle(CLASS_NAME_ACTIVE$1);\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$2);\n      this._element = null;\n    } // Static\n    ;\n\n    Button.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$2);\n\n        if (!data) {\n          data = new Button(this);\n        }\n\n        if (config === 'toggle') {\n          data[config]();\n        }\n      });\n    };\n\n    Button.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$2);\n    };\n\n    _createClass(Button, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$2;\n      }\n    }]);\n\n    return Button;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE_CARROT, function (event) {\n    event.preventDefault();\n    var button = event.target.closest(SELECTOR_BUTTON);\n    var data = Data.getData(button, DATA_KEY$2);\n\n    if (!data) {\n      data = new Button(button);\n    }\n\n    data.toggle();\n  });\n  EventHandler.on(document, EVENT_FOCUS_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {\n    var button = event.target.closest(SELECTOR_BUTTON);\n\n    if (button) {\n      button.classList.add(CLASS_NAME_FOCUS);\n    }\n  });\n  EventHandler.on(document, EVENT_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {\n    var button = event.target.closest(SELECTOR_BUTTON);\n\n    if (button) {\n      button.classList.remove(CLASS_NAME_FOCUS);\n    }\n  });\n  var $$3 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .button to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$3) {\n    var JQUERY_NO_CONFLICT$2 = $$3.fn[NAME$2];\n    $$3.fn[NAME$2] = Button.jQueryInterface;\n    $$3.fn[NAME$2].Constructor = Button;\n\n    $$3.fn[NAME$2].noConflict = function () {\n      $$3.fn[NAME$2] = JQUERY_NO_CONFLICT$2;\n      return Button.jQueryInterface;\n    };\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.0-alpha1): dom/manipulator.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, function (chr) {\n      return \"-\" + chr.toLowerCase();\n    });\n  }\n\n  var Manipulator = {\n    setDataAttribute: function setDataAttribute(element, key, value) {\n      element.setAttribute(\"data-\" + normalizeDataKey(key), value);\n    },\n    removeDataAttribute: function removeDataAttribute(element, key) {\n      element.removeAttribute(\"data-\" + normalizeDataKey(key));\n    },\n    getDataAttributes: function getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      var attributes = _objectSpread2({}, element.dataset);\n\n      Object.keys(attributes).forEach(function (key) {\n        attributes[key] = normalizeData(attributes[key]);\n      });\n      return attributes;\n    },\n    getDataAttribute: function getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(\"data-\" + normalizeDataKey(key)));\n    },\n    offset: function offset(element) {\n      var rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + document.body.scrollTop,\n        left: rect.left + document.body.scrollLeft\n      };\n    },\n    position: function position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    },\n    toggleClass: function toggleClass(element, className) {\n      if (!element) {\n        return;\n      }\n\n      if (element.classList.contains(className)) {\n        element.classList.remove(className);\n      } else {\n        element.classList.add(className);\n      }\n    }\n  };\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var NAME$3 = 'carousel';\n  var VERSION$3 = '3.2.2';\n  var DATA_KEY$3 = 'coreui.carousel';\n  var EVENT_KEY$3 = \".\" + DATA_KEY$3;\n  var DATA_API_KEY$3 = '.data-api';\n  var ARROW_LEFT_KEY = 'ArrowLeft';\n  var ARROW_RIGHT_KEY = 'ArrowRight';\n  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  var SWIPE_THRESHOLD = 40;\n  var Default$1 = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true,\n    touch: true\n  };\n  var DefaultType = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean',\n    touch: 'boolean'\n  };\n  var DIRECTION_NEXT = 'next';\n  var DIRECTION_PREV = 'prev';\n  var DIRECTION_LEFT = 'left';\n  var DIRECTION_RIGHT = 'right';\n  var EVENT_SLIDE = \"slide\" + EVENT_KEY$3;\n  var EVENT_SLID = \"slid\" + EVENT_KEY$3;\n  var EVENT_KEYDOWN = \"keydown\" + EVENT_KEY$3;\n  var EVENT_MOUSEENTER = \"mouseenter\" + EVENT_KEY$3;\n  var EVENT_MOUSELEAVE = \"mouseleave\" + EVENT_KEY$3;\n  var EVENT_TOUCHSTART = \"touchstart\" + EVENT_KEY$3;\n  var EVENT_TOUCHMOVE = \"touchmove\" + EVENT_KEY$3;\n  var EVENT_TOUCHEND = \"touchend\" + EVENT_KEY$3;\n  var EVENT_POINTERDOWN = \"pointerdown\" + EVENT_KEY$3;\n  var EVENT_POINTERUP = \"pointerup\" + EVENT_KEY$3;\n  var EVENT_DRAG_START = \"dragstart\" + EVENT_KEY$3;\n  var EVENT_LOAD_DATA_API = \"load\" + EVENT_KEY$3 + DATA_API_KEY$3;\n  var EVENT_CLICK_DATA_API$3 = \"click\" + EVENT_KEY$3 + DATA_API_KEY$3;\n  var CLASS_NAME_CAROUSEL = 'carousel';\n  var CLASS_NAME_ACTIVE$2 = 'active';\n  var CLASS_NAME_SLIDE = 'slide';\n  var CLASS_NAME_RIGHT = 'carousel-item-right';\n  var CLASS_NAME_LEFT = 'carousel-item-left';\n  var CLASS_NAME_NEXT = 'carousel-item-next';\n  var CLASS_NAME_PREV = 'carousel-item-prev';\n  var CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  var SELECTOR_ACTIVE$1 = '.active';\n  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\n  var SELECTOR_ITEM = '.carousel-item';\n  var SELECTOR_ITEM_IMG = '.carousel-item img';\n  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\n  var SELECTOR_INDICATORS = '.carousel-indicators';\n  var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';\n  var SELECTOR_DATA_RIDE = '[data-ride=\"carousel\"]';\n  var PointerType = {\n    TOUCH: 'touch',\n    PEN: 'pen'\n  };\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Carousel = /*#__PURE__*/function () {\n    function Carousel(element, config) {\n      this._items = null;\n      this._interval = null;\n      this._activeElement = null;\n      this._isPaused = false;\n      this._isSliding = false;\n      this.touchTimeout = null;\n      this.touchStartX = 0;\n      this.touchDeltaX = 0;\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);\n\n      this._addEventListeners();\n\n      Data.setData(element, DATA_KEY$3, this);\n    } // Getters\n\n\n    var _proto = Carousel.prototype; // Public\n\n    _proto.next = function next() {\n      if (!this._isSliding) {\n        this._slide(DIRECTION_NEXT);\n      }\n    };\n\n    _proto.nextWhenVisible = function nextWhenVisible() {\n      // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n      if (!document.hidden && isVisible(this._element)) {\n        this.next();\n      }\n    };\n\n    _proto.prev = function prev() {\n      if (!this._isSliding) {\n        this._slide(DIRECTION_PREV);\n      }\n    };\n\n    _proto.pause = function pause(event) {\n      if (!event) {\n        this._isPaused = true;\n      }\n\n      if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {\n        triggerTransitionEnd(this._element);\n        this.cycle(true);\n      }\n\n      clearInterval(this._interval);\n      this._interval = null;\n    };\n\n    _proto.cycle = function cycle(event) {\n      if (!event) {\n        this._isPaused = false;\n      }\n\n      if (this._interval) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n\n      if (this._config && this._config.interval && !this._isPaused) {\n        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n      }\n    };\n\n    _proto.to = function to(index) {\n      var _this = this;\n\n      this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      var activeIndex = this._getItemIndex(this._activeElement);\n\n      if (index > this._items.length - 1 || index < 0) {\n        return;\n      }\n\n      if (this._isSliding) {\n        EventHandler.one(this._element, EVENT_SLID, function () {\n          return _this.to(index);\n        });\n        return;\n      }\n\n      if (activeIndex === index) {\n        this.pause();\n        this.cycle();\n        return;\n      }\n\n      var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;\n\n      this._slide(direction, this._items[index]);\n    };\n\n    _proto.dispose = function dispose() {\n      EventHandler.off(this._element, EVENT_KEY$3);\n      Data.removeData(this._element, DATA_KEY$3);\n      this._items = null;\n      this._config = null;\n      this._element = null;\n      this._interval = null;\n      this._isPaused = null;\n      this._isSliding = null;\n      this._activeElement = null;\n      this._indicatorsElement = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$1), config);\n      typeCheckConfig(NAME$3, config, DefaultType);\n      return config;\n    };\n\n    _proto._handleSwipe = function _handleSwipe() {\n      var absDeltax = Math.abs(this.touchDeltaX);\n\n      if (absDeltax <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      var direction = absDeltax / this.touchDeltaX;\n      this.touchDeltaX = 0; // swipe left\n\n      if (direction > 0) {\n        this.prev();\n      } // swipe right\n\n\n      if (direction < 0) {\n        this.next();\n      }\n    };\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this2 = this;\n\n      if (this._config.keyboard) {\n        EventHandler.on(this._element, EVENT_KEYDOWN, function (event) {\n          return _this2._keydown(event);\n        });\n      }\n\n      if (this._config.pause === 'hover') {\n        EventHandler.on(this._element, EVENT_MOUSEENTER, function (event) {\n          return _this2.pause(event);\n        });\n        EventHandler.on(this._element, EVENT_MOUSELEAVE, function (event) {\n          return _this2.cycle(event);\n        });\n      }\n\n      if (this._config.touch && this._touchSupported) {\n        this._addTouchEventListeners();\n      }\n    };\n\n    _proto._addTouchEventListeners = function _addTouchEventListeners() {\n      var _this3 = this;\n\n      var start = function start(event) {\n        if (_this3._pointerEvent && PointerType[event.pointerType.toUpperCase()]) {\n          _this3.touchStartX = event.clientX;\n        } else if (!_this3._pointerEvent) {\n          _this3.touchStartX = event.touches[0].clientX;\n        }\n      };\n\n      var move = function move(event) {\n        // ensure swiping with one touch and not pinching\n        if (event.touches && event.touches.length > 1) {\n          _this3.touchDeltaX = 0;\n        } else {\n          _this3.touchDeltaX = event.touches[0].clientX - _this3.touchStartX;\n        }\n      };\n\n      var end = function end(event) {\n        if (_this3._pointerEvent && PointerType[event.pointerType.toUpperCase()]) {\n          _this3.touchDeltaX = event.clientX - _this3.touchStartX;\n        }\n\n        _this3._handleSwipe();\n\n        if (_this3._config.pause === 'hover') {\n          // If it's a touch-enabled device, mouseenter/leave are fired as\n          // part of the mouse compatibility events on first tap - the carousel\n          // would stop cycling until user tapped out of it;\n          // here, we listen for touchend, explicitly pause the carousel\n          // (as if it's the second time we tap on it, mouseenter compat event\n          // is NOT fired) and after a timeout (to allow for mouse compatibility\n          // events to fire) we explicitly restart cycling\n          _this3.pause();\n\n          if (_this3.touchTimeout) {\n            clearTimeout(_this3.touchTimeout);\n          }\n\n          _this3.touchTimeout = setTimeout(function (event) {\n            return _this3.cycle(event);\n          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);\n        }\n      };\n\n      SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(function (itemImg) {\n        EventHandler.on(itemImg, EVENT_DRAG_START, function (e) {\n          return e.preventDefault();\n        });\n      });\n\n      if (this._pointerEvent) {\n        EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {\n          return start(event);\n        });\n        EventHandler.on(this._element, EVENT_POINTERUP, function (event) {\n          return end(event);\n        });\n\n        this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n      } else {\n        EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {\n          return start(event);\n        });\n        EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {\n          return move(event);\n        });\n        EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {\n          return end(event);\n        });\n      }\n    };\n\n    _proto._keydown = function _keydown(event) {\n      if (/input|textarea/i.test(event.target.tagName)) {\n        return;\n      }\n\n      switch (event.key) {\n        case ARROW_LEFT_KEY:\n          event.preventDefault();\n          this.prev();\n          break;\n\n        case ARROW_RIGHT_KEY:\n          event.preventDefault();\n          this.next();\n          break;\n      }\n    };\n\n    _proto._getItemIndex = function _getItemIndex(element) {\n      this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];\n      return this._items.indexOf(element);\n    };\n\n    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {\n      var isNextDirection = direction === DIRECTION_NEXT;\n      var isPrevDirection = direction === DIRECTION_PREV;\n\n      var activeIndex = this._getItemIndex(activeElement);\n\n      var lastItemIndex = this._items.length - 1;\n      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\n\n      if (isGoingToWrap && !this._config.wrap) {\n        return activeElement;\n      }\n\n      var delta = direction === DIRECTION_PREV ? -1 : 1;\n      var itemIndex = (activeIndex + delta) % this._items.length;\n      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\n    };\n\n    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {\n      var targetIndex = this._getItemIndex(relatedTarget);\n\n      var fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));\n\n      return EventHandler.trigger(this._element, EVENT_SLIDE, {\n        relatedTarget: relatedTarget,\n        direction: eventDirectionName,\n        from: fromIndex,\n        to: targetIndex\n      });\n    };\n\n    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {\n      if (this._indicatorsElement) {\n        var indicators = SelectorEngine.find(SELECTOR_ACTIVE$1, this._indicatorsElement);\n\n        for (var i = 0; i < indicators.length; i++) {\n          indicators[i].classList.remove(CLASS_NAME_ACTIVE$2);\n        }\n\n        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\n\n        if (nextIndicator) {\n          nextIndicator.classList.add(CLASS_NAME_ACTIVE$2);\n        }\n      }\n    };\n\n    _proto._slide = function _slide(direction, element) {\n      var _this4 = this;\n\n      var activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      var activeElementIndex = this._getItemIndex(activeElement);\n\n      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\n\n      var nextElementIndex = this._getItemIndex(nextElement);\n\n      var isCycling = Boolean(this._interval);\n      var directionalClassName;\n      var orderClassName;\n      var eventDirectionName;\n\n      if (direction === DIRECTION_NEXT) {\n        directionalClassName = CLASS_NAME_LEFT;\n        orderClassName = CLASS_NAME_NEXT;\n        eventDirectionName = DIRECTION_LEFT;\n      } else {\n        directionalClassName = CLASS_NAME_RIGHT;\n        orderClassName = CLASS_NAME_PREV;\n        eventDirectionName = DIRECTION_RIGHT;\n      }\n\n      if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {\n        this._isSliding = false;\n        return;\n      }\n\n      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n      if (slideEvent.defaultPrevented) {\n        return;\n      }\n\n      if (!activeElement || !nextElement) {\n        // Some weirdness is happening, so we bail\n        return;\n      }\n\n      this._isSliding = true;\n\n      if (isCycling) {\n        this.pause();\n      }\n\n      this._setActiveIndicatorElement(nextElement);\n\n      if (this._element.classList.contains(CLASS_NAME_SLIDE)) {\n        nextElement.classList.add(orderClassName);\n        reflow(nextElement);\n        activeElement.classList.add(directionalClassName);\n        nextElement.classList.add(directionalClassName);\n        var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);\n\n        if (nextElementInterval) {\n          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n          this._config.interval = nextElementInterval;\n        } else {\n          this._config.interval = this._config.defaultInterval || this._config.interval;\n        }\n\n        var transitionDuration = getTransitionDurationFromElement(activeElement);\n        EventHandler.one(activeElement, TRANSITION_END, function () {\n          nextElement.classList.remove(directionalClassName, orderClassName);\n          nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n          _this4._isSliding = false;\n          setTimeout(function () {\n            EventHandler.trigger(_this4._element, EVENT_SLID, {\n              relatedTarget: nextElement,\n              direction: eventDirectionName,\n              from: activeElementIndex,\n              to: nextElementIndex\n            });\n          }, 0);\n        });\n        emulateTransitionEnd(activeElement, transitionDuration);\n      } else {\n        activeElement.classList.remove(CLASS_NAME_ACTIVE$2);\n        nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n        this._isSliding = false;\n        EventHandler.trigger(this._element, EVENT_SLID, {\n          relatedTarget: nextElement,\n          direction: eventDirectionName,\n          from: activeElementIndex,\n          to: nextElementIndex\n        });\n      }\n\n      if (isCycling) {\n        this.cycle();\n      }\n    } // Static\n    ;\n\n    Carousel.carouselInterface = function carouselInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$3);\n\n      var _config = _objectSpread2(_objectSpread2({}, Default$1), Manipulator.getDataAttributes(element));\n\n      if (_typeof(config) === 'object') {\n        _config = _objectSpread2(_objectSpread2({}, _config), config);\n      }\n\n      var action = typeof config === 'string' ? config : _config.slide;\n\n      if (!data) {\n        data = new Carousel(element, _config);\n      }\n\n      if (typeof config === 'number') {\n        data.to(config);\n      } else if (typeof action === 'string') {\n        if (typeof data[action] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + action + \"\\\"\");\n        }\n\n        data[action]();\n      } else if (_config.interval && _config.ride) {\n        data.pause();\n        data.cycle();\n      }\n    };\n\n    Carousel.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Carousel.carouselInterface(this, config);\n      });\n    };\n\n    Carousel.dataApiClickHandler = function dataApiClickHandler(event) {\n      var target = getElementFromSelector(this);\n\n      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n        return;\n      }\n\n      var config = _objectSpread2(_objectSpread2({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));\n\n      var slideIndex = this.getAttribute('data-slide-to');\n\n      if (slideIndex) {\n        config.interval = false;\n      }\n\n      Carousel.carouselInterface(target, config);\n\n      if (slideIndex) {\n        Data.getData(target, DATA_KEY$3).to(slideIndex);\n      }\n\n      event.preventDefault();\n    };\n\n    Carousel.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$3);\n    };\n\n    _createClass(Carousel, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$3;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$1;\n      }\n    }]);\n\n    return Carousel;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);\n  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {\n    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n    for (var i = 0, len = carousels.length; i < len; i++) {\n      Carousel.carouselInterface(carousels[i], Data.getData(carousels[i], DATA_KEY$3));\n    }\n  });\n  var $$4 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .carousel to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$4) {\n    var JQUERY_NO_CONFLICT$3 = $$4.fn[NAME$3];\n    $$4.fn[NAME$3] = Carousel.jQueryInterface;\n    $$4.fn[NAME$3].Constructor = Carousel;\n\n    $$4.fn[NAME$3].noConflict = function () {\n      $$4.fn[NAME$3] = JQUERY_NO_CONFLICT$3;\n      return Carousel.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$4 = 'class-toggler';\n  var VERSION$4 = '3.2.2';\n  var DATA_KEY$4 = 'coreui.class-toggler';\n  var EVENT_KEY$4 = \".\" + DATA_KEY$4;\n  var DATA_API_KEY$4 = '.data-api';\n  var DefaultType$1 = {\n    addClass: '(null|array|string)',\n    breakpoints: '(null|array|string)',\n    removeClass: '(null|array|string)',\n    responsive: '(null|boolean)',\n    target: '(null|string)',\n    toggleClass: '(null|array|string)'\n  };\n  var Default$2 = {\n    addClass: null,\n    breakpoints: ['', 'sm', 'md', 'lg', 'xl'],\n    removeClass: null,\n    responsive: false,\n    target: 'body',\n    toggleClass: null\n  };\n  var CLASS_NAME_CLASS_TOGGLER = 'c-class-toggler';\n  var EVENT_CLASS_ADDED = 'classadded';\n  var EVENT_CLASS_REMOVED = 'classremoved';\n  var EVENT_CLASS_TOGGLE = 'classtoggle';\n  var EVENT_CLICK_DATA_API$4 = \"click\" + EVENT_KEY$4 + DATA_API_KEY$4;\n  var SELECTOR_CLASS_TOGGLER = '.c-class-toggler';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var ClassToggler = /*#__PURE__*/function () {\n    function ClassToggler(element, config) {\n      this._element = element;\n      this._config = this._getConfig(config);\n      Data.setData(element, DATA_KEY$4, this);\n    } // Getters\n\n\n    var _proto = ClassToggler.prototype; // Public\n\n    _proto.add = function add() {\n      var _this = this;\n\n      var target = this._target();\n\n      var classNames = this._config.addClass.replace(/\\s/g, '').split(',');\n\n      classNames.forEach(function (className) {\n        target.classList.add(className);\n\n        _this._customEvent(EVENT_CLASS_ADDED, target, true, className);\n      });\n    };\n\n    _proto.remove = function remove() {\n      var _this2 = this;\n\n      var target = this._target();\n\n      var classNames = this._config.removeClass.replace(/\\s/g, '').split(',');\n\n      classNames.forEach(function (className) {\n        if (_this2._config.responsive) {\n          _this2._updateResponsiveClassNames(className).forEach(function (className) {\n            target.classList.remove(className);\n\n            _this2._customEvent(EVENT_CLASS_REMOVED, target, false, className);\n          });\n        } else {\n          target.classList.remove(className);\n\n          _this2._customEvent(EVENT_CLASS_REMOVED, target, false, className);\n        }\n      });\n    };\n\n    _proto.toggle = function toggle() {\n      var _this3 = this;\n\n      var target = this._target();\n\n      var classNames = this._config.toggleClass.replace(/\\s/g, '').split(',');\n\n      if (this._config.responsive) {\n        classNames.forEach(function (className) {\n          var responsiveClassNames = _this3._updateResponsiveClassNames(className);\n\n          if (responsiveClassNames.filter(function (className) {\n            return target.classList.contains(className);\n          }).length) {\n            _this3._updateResponsiveClassNames(className).forEach(function (className) {\n              _this3._config.removeClass = className;\n\n              _this3.remove();\n\n              _this3._customEvent(EVENT_CLASS_TOGGLE, target, false, className);\n            });\n          } else {\n            _this3._config.addClass = className;\n\n            _this3.add();\n\n            _this3._customEvent(EVENT_CLASS_TOGGLE, target, true, className);\n          }\n        });\n      } else {\n        classNames.forEach(function (className) {\n          if (target.classList.contains(className)) {\n            _this3._config.removeClass = className;\n\n            _this3.remove();\n\n            _this3._customEvent(EVENT_CLASS_TOGGLE, target, false, className);\n          } else {\n            _this3._config.addClass = className;\n\n            _this3.add();\n\n            _this3._customEvent(EVENT_CLASS_TOGGLE, target, true, className);\n          }\n        });\n      }\n    };\n\n    _proto[\"class\"] = function _class() {\n      this._config.toggleClass = this._config[\"class\"];\n\n      if (this._element.getAttribute('responsive')) {\n        this._config.responsive = this._element.getAttribute('responsive');\n      }\n\n      this.toggle();\n    } // Private\n    ;\n\n    _proto._target = function _target() {\n      if (this._config.target === 'body') {\n        return document.querySelector(this._config.target);\n      }\n\n      if (this._config.target === '_parent') {\n        return this._element.parentNode;\n      }\n\n      return document.querySelector(this._config.target);\n    };\n\n    _proto._customEvent = function _customEvent(eventName, target, add, className) {\n      var event = new CustomEvent(eventName, {\n        detail: {\n          target: target,\n          add: add,\n          className: className\n        }\n      });\n      target.dispatchEvent(event);\n    };\n\n    _proto._breakpoint = function _breakpoint(className) {\n      var breakpoints = this._config.breakpoints;\n      return breakpoints.filter(function (breakpoint) {\n        return breakpoint.length > 0;\n      }).filter(function (breakpoint) {\n        return className.includes(breakpoint);\n      })[0];\n    };\n\n    _proto._breakpoints = function _breakpoints(className) {\n      var breakpoints = this._config.breakpoints;\n      return breakpoints.slice(0, breakpoints.indexOf(breakpoints.filter(function (breakpoint) {\n        return breakpoint.length > 0;\n      }).filter(function (breakpoint) {\n        return className.includes(breakpoint);\n      })[0]) + 1);\n    };\n\n    _proto._updateResponsiveClassNames = function _updateResponsiveClassNames(className) {\n      var bp = this._breakpoint(className);\n\n      return this._breakpoints(className).map(function (breakpoint) {\n        return breakpoint.length > 0 ? className.replace(bp, breakpoint) : className.replace(\"-\" + bp, breakpoint);\n      });\n    };\n\n    _proto._includesResponsiveClass = function _includesResponsiveClass(className) {\n      var _this4 = this;\n\n      return this._updateResponsiveClassNames(className).filter(function (className) {\n        return _this4._config.target.contains(className);\n      });\n    } // Static\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);\n      typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    ClassToggler.classTogglerInterface = function classTogglerInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$4);\n\n      var _config = _typeof(config) === 'object' && config;\n\n      if (!data) {\n        data = new ClassToggler(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    ClassToggler.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        ClassToggler.classTogglerInterface(this, config);\n      });\n    };\n\n    _createClass(ClassToggler, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$4;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$2;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$1;\n      }\n    }]);\n\n    return ClassToggler;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_CLASS_TOGGLER, function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    var toggler = event.target;\n\n    if (!toggler.classList.contains(CLASS_NAME_CLASS_TOGGLER)) {\n      toggler = toggler.closest(SELECTOR_CLASS_TOGGLER);\n    }\n\n    if (typeof toggler.dataset.addClass !== 'undefined') {\n      ClassToggler.classTogglerInterface(toggler, 'add');\n    }\n\n    if (typeof toggler.dataset.removeClass !== 'undefined') {\n      ClassToggler.classTogglerInterface(toggler, 'remove');\n    }\n\n    if (typeof toggler.dataset.toggleClass !== 'undefined') {\n      ClassToggler.classTogglerInterface(toggler, 'toggle');\n    }\n\n    if (typeof toggler.dataset[\"class\"] !== 'undefined') {\n      ClassToggler.classTogglerInterface(toggler, 'class');\n    }\n  });\n  var $$5 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .c-class-toggler to jQuery only if jQuery is present\r\n   */\n\n  if ($$5) {\n    var JQUERY_NO_CONFLICT$4 = $$5.fn[NAME$4];\n    $$5.fn[NAME$4] = ClassToggler.jQueryInterface;\n    $$5.fn[NAME$4].Constructor = ClassToggler;\n\n    $$5.fn[NAME$4].noConflict = function () {\n      $$5.fn[NAME$4] = JQUERY_NO_CONFLICT$4;\n      return ClassToggler.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$5 = 'collapse';\n  var VERSION$5 = '3.2.2';\n  var DATA_KEY$5 = 'coreui.collapse';\n  var EVENT_KEY$5 = \".\" + DATA_KEY$5;\n  var DATA_API_KEY$5 = '.data-api';\n  var Default$3 = {\n    toggle: true,\n    parent: ''\n  };\n  var DefaultType$2 = {\n    toggle: 'boolean',\n    parent: '(string|element)'\n  };\n  var EVENT_SHOW = \"show\" + EVENT_KEY$5;\n  var EVENT_SHOWN = \"shown\" + EVENT_KEY$5;\n  var EVENT_HIDE = \"hide\" + EVENT_KEY$5;\n  var EVENT_HIDDEN = \"hidden\" + EVENT_KEY$5;\n  var EVENT_CLICK_DATA_API$5 = \"click\" + EVENT_KEY$5 + DATA_API_KEY$5;\n  var CLASS_NAME_SHOW$1 = 'show';\n  var CLASS_NAME_COLLAPSE = 'collapse';\n  var CLASS_NAME_COLLAPSING = 'collapsing';\n  var CLASS_NAME_COLLAPSED = 'collapsed';\n  var WIDTH = 'width';\n  var HEIGHT = 'height';\n  var SELECTOR_ACTIVES = '.show, .collapsing';\n  var SELECTOR_DATA_TOGGLE$1 = '[data-toggle=\"collapse\"]';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Collapse = /*#__PURE__*/function () {\n    function Collapse(element, config) {\n      this._isTransitioning = false;\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._triggerArray = SelectorEngine.find(SELECTOR_DATA_TOGGLE$1 + \"[href=\\\"#\" + element.id + \"\\\"],\" + (SELECTOR_DATA_TOGGLE$1 + \"[data-target=\\\"#\" + element.id + \"\\\"]\"));\n      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$1);\n\n      for (var i = 0, len = toggleList.length; i < len; i++) {\n        var elem = toggleList[i];\n        var selector = getSelectorFromElement(elem);\n        var filterElement = SelectorEngine.find(selector).filter(function (foundElem) {\n          return foundElem === element;\n        });\n\n        if (selector !== null && filterElement.length) {\n          this._selector = selector;\n\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null;\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n\n      Data.setData(element, DATA_KEY$5, this);\n    } // Getters\n\n\n    var _proto = Collapse.prototype; // Public\n\n    _proto.toggle = function toggle() {\n      if (this._element.classList.contains(CLASS_NAME_SHOW$1)) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._isTransitioning || this._element.classList.contains(CLASS_NAME_SHOW$1)) {\n        return;\n      }\n\n      var actives;\n      var activesData;\n\n      if (this._parent) {\n        actives = SelectorEngine.find(SELECTOR_ACTIVES, this._parent).filter(function (elem) {\n          if (typeof _this._config.parent === 'string') {\n            return elem.getAttribute('data-parent') === _this._config.parent;\n          }\n\n          return elem.classList.contains(CLASS_NAME_COLLAPSE);\n        });\n\n        if (actives.length === 0) {\n          actives = null;\n        }\n      }\n\n      var container = SelectorEngine.findOne(this._selector);\n\n      if (actives) {\n        var tempActiveData = actives.filter(function (elem) {\n          return container !== elem;\n        });\n        activesData = tempActiveData[0] ? Data.getData(tempActiveData[0], DATA_KEY$5) : null;\n\n        if (activesData && activesData._isTransitioning) {\n          return;\n        }\n      }\n\n      var startEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      if (actives) {\n        actives.forEach(function (elemActive) {\n          if (container !== elemActive) {\n            Collapse.collapseInterface(elemActive, 'hide');\n          }\n\n          if (!activesData) {\n            Data.setData(elemActive, DATA_KEY$5, null);\n          }\n        });\n      }\n\n      var dimension = this._getDimension();\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.style[dimension] = 0;\n\n      if (this._triggerArray.length) {\n        this._triggerArray.forEach(function (element) {\n          element.classList.remove(CLASS_NAME_COLLAPSED);\n          element.setAttribute('aria-expanded', true);\n        });\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        _this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        _this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$1);\n\n        _this._element.style[dimension] = '';\n\n        _this.setTransitioning(false);\n\n        EventHandler.trigger(_this._element, EVENT_SHOWN);\n      };\n\n      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      var scrollSize = \"scroll\" + capitalizedDimension;\n      var transitionDuration = getTransitionDurationFromElement(this._element);\n      EventHandler.one(this._element, TRANSITION_END, complete);\n      emulateTransitionEnd(this._element, transitionDuration);\n      this._element.style[dimension] = this._element[scrollSize] + \"px\";\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      if (this._isTransitioning || !this._element.classList.contains(CLASS_NAME_SHOW$1)) {\n        return;\n      }\n\n      var startEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      var dimension = this._getDimension();\n\n      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + \"px\";\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$1);\n\n      var triggerArrayLength = this._triggerArray.length;\n\n      if (triggerArrayLength > 0) {\n        for (var i = 0; i < triggerArrayLength; i++) {\n          var trigger = this._triggerArray[i];\n          var elem = getElementFromSelector(trigger);\n\n          if (elem && !elem.classList.contains(CLASS_NAME_SHOW$1)) {\n            trigger.classList.add(CLASS_NAME_COLLAPSED);\n            trigger.setAttribute('aria-expanded', false);\n          }\n        }\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        _this2.setTransitioning(false);\n\n        _this2._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        _this2._element.classList.add(CLASS_NAME_COLLAPSE);\n\n        EventHandler.trigger(_this2._element, EVENT_HIDDEN);\n      };\n\n      this._element.style[dimension] = '';\n      var transitionDuration = getTransitionDurationFromElement(this._element);\n      EventHandler.one(this._element, TRANSITION_END, complete);\n      emulateTransitionEnd(this._element, transitionDuration);\n    };\n\n    _proto.setTransitioning = function setTransitioning(isTransitioning) {\n      this._isTransitioning = isTransitioning;\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$5);\n      this._config = null;\n      this._parent = null;\n      this._element = null;\n      this._triggerArray = null;\n      this._isTransitioning = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$3), config);\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      typeCheckConfig(NAME$5, config, DefaultType$2);\n      return config;\n    };\n\n    _proto._getDimension = function _getDimension() {\n      return this._element.classList.contains(WIDTH) ? WIDTH : HEIGHT;\n    };\n\n    _proto._getParent = function _getParent() {\n      var _this3 = this;\n\n      var parent = this._config.parent;\n\n      if (isElement(parent)) {\n        // it's a jQuery object\n        if (typeof parent.jquery !== 'undefined' || typeof parent[0] !== 'undefined') {\n          parent = parent[0];\n        }\n      } else {\n        parent = SelectorEngine.findOne(parent);\n      }\n\n      var selector = SELECTOR_DATA_TOGGLE$1 + \"[data-parent=\\\"\" + parent + \"\\\"]\";\n      SelectorEngine.find(selector, parent).forEach(function (element) {\n        var selected = getElementFromSelector(element);\n\n        _this3._addAriaAndCollapsedClass(selected, [element]);\n      });\n      return parent;\n    };\n\n    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {\n      if (!element || !triggerArray.length) {\n        return;\n      }\n\n      var isOpen = element.classList.contains(CLASS_NAME_SHOW$1);\n      triggerArray.forEach(function (elem) {\n        if (isOpen) {\n          elem.classList.remove(CLASS_NAME_COLLAPSED);\n        } else {\n          elem.classList.add(CLASS_NAME_COLLAPSED);\n        }\n\n        elem.setAttribute('aria-expanded', isOpen);\n      });\n    } // Static\n    ;\n\n    Collapse.collapseInterface = function collapseInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$5);\n\n      var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$3), Manipulator.getDataAttributes(element)), _typeof(config) === 'object' && config ? config : {});\n\n      if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {\n        _config.toggle = false;\n      }\n\n      if (!data) {\n        data = new Collapse(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    Collapse.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Collapse.collapseInterface(this, config);\n      });\n    };\n\n    Collapse.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$5);\n    };\n\n    _createClass(Collapse, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$5;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$3;\n      }\n    }]);\n\n    return Collapse;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE$1, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    var triggerData = Manipulator.getDataAttributes(this);\n    var selector = getSelectorFromElement(this);\n    var selectorElements = SelectorEngine.find(selector);\n    selectorElements.forEach(function (element) {\n      var data = Data.getData(element, DATA_KEY$5);\n      var config;\n\n      if (data) {\n        // update parent attribute\n        if (data._parent === null && typeof triggerData.parent === 'string') {\n          data._config.parent = triggerData.parent;\n          data._parent = data._getParent();\n        }\n\n        config = 'toggle';\n      } else {\n        config = triggerData;\n      }\n\n      Collapse.collapseInterface(element, config);\n    });\n  });\n  var $$6 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .collapse to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$6) {\n    var JQUERY_NO_CONFLICT$5 = $$6.fn[NAME$5];\n    $$6.fn[NAME$5] = Collapse.jQueryInterface;\n    $$6.fn[NAME$5].Constructor = Collapse;\n\n    $$6.fn[NAME$5].noConflict = function () {\n      $$6.fn[NAME$5] = JQUERY_NO_CONFLICT$5;\n      return Collapse.jQueryInterface;\n    };\n  }\n\n  var top = 'top';\n  var bottom = 'bottom';\n  var right = 'right';\n  var left = 'left';\n  var auto = 'auto';\n  var basePlacements = [top, bottom, right, left];\n  var start = 'start';\n  var end = 'end';\n  var clippingParents = 'clippingParents';\n  var viewport = 'viewport';\n  var popper = 'popper';\n  var reference = 'reference';\n  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n    return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n  }, []);\n  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n    return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n  }, []); // modifiers that need to read the DOM\n\n  var beforeRead = 'beforeRead';\n  var read = 'read';\n  var afterRead = 'afterRead'; // pure-logic modifiers\n\n  var beforeMain = 'beforeMain';\n  var main = 'main';\n  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\n  var beforeWrite = 'beforeWrite';\n  var write = 'write';\n  var afterWrite = 'afterWrite';\n  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\n  function getNodeName(element) {\n    return element ? (element.nodeName || '').toLowerCase() : null;\n  }\n  /*:: import type { Window } from '../types'; */\n\n  /*:: declare function getWindow(node: Node | Window): Window; */\n\n\n  function getWindow(node) {\n    if (node.toString() !== '[object Window]') {\n      var ownerDocument = node.ownerDocument;\n      return ownerDocument ? ownerDocument.defaultView || window : window;\n    }\n\n    return node;\n  }\n  /*:: declare function isElement(node: mixed): boolean %checks(node instanceof\r\n    Element); */\n\n\n  function isElement$1(node) {\n    var OwnElement = getWindow(node).Element;\n    return node instanceof OwnElement || node instanceof Element;\n  }\n  /*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof\r\n    HTMLElement); */\n\n\n  function isHTMLElement(node) {\n    var OwnElement = getWindow(node).HTMLElement;\n    return node instanceof OwnElement || node instanceof HTMLElement;\n  }\n  /*:: declare function isShadowRoot(node: mixed): boolean %checks(node instanceof\r\n    ShadowRoot); */\n\n\n  function isShadowRoot(node) {\n    var OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n  } // and applies them to the HTMLElements such as popper and arrow\n\n\n  function applyStyles(_ref) {\n    var state = _ref.state;\n    Object.keys(state.elements).forEach(function (name) {\n      var style = state.styles[name] || {};\n      var attributes = state.attributes[name] || {};\n      var element = state.elements[name]; // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe\n\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (name) {\n        var value = attributes[name];\n\n        if (value === false) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value === true ? '' : value);\n        }\n      });\n    });\n  }\n\n  function effect(_ref2) {\n    var state = _ref2.state;\n    var initialStyles = {\n      popper: {\n        position: state.options.strategy,\n        left: '0',\n        top: '0',\n        margin: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      },\n      reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n\n    if (state.elements.arrow) {\n      Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    }\n\n    return function () {\n      Object.keys(state.elements).forEach(function (name) {\n        var element = state.elements[name];\n        var attributes = state.attributes[name] || {};\n        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n        var style = styleProperties.reduce(function (style, property) {\n          style[property] = '';\n          return style;\n        }, {}); // arrow is optional + virtual elements\n\n        if (!isHTMLElement(element) || !getNodeName(element)) {\n          return;\n        } // Flow doesn't support to extend this property, but it's the most\n        // effective way to apply styles to an HTMLElement\n        // $FlowFixMe\n\n\n        Object.assign(element.style, style);\n        Object.keys(attributes).forEach(function (attribute) {\n          element.removeAttribute(attribute);\n        });\n      });\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var applyStyles$1 = {\n    name: 'applyStyles',\n    enabled: true,\n    phase: 'write',\n    fn: applyStyles,\n    effect: effect,\n    requires: ['computeStyles']\n  };\n\n  function getBasePlacement(placement) {\n    return placement.split('-')[0];\n  } // Returns the layout rect of an element relative to its offsetParent. Layout\n  // means it doesn't take into account transforms.\n\n\n  function getLayoutRect(element) {\n    return {\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    };\n  }\n\n  function contains(parent, child) {\n    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n    if (parent.contains(child)) {\n      return true;\n    } // then fallback to custom implementation with Shadow DOM support\n    else if (rootNode && isShadowRoot(rootNode)) {\n        var next = child;\n\n        do {\n          if (next && parent.isSameNode(next)) {\n            return true;\n          } // $FlowFixMe: need a better way to handle this...\n\n\n          next = next.parentNode || next.host;\n        } while (next);\n      } // Give up, the result is false\n\n\n    return false;\n  }\n\n  function getComputedStyle$1(element) {\n    return getWindow(element).getComputedStyle(element);\n  }\n\n  function isTableElement(element) {\n    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n  }\n\n  function getDocumentElement(element) {\n    // $FlowFixMe: assume body is always available\n    return ((isElement$1(element) ? element.ownerDocument : element.document) || window.document).documentElement;\n  }\n\n  function getParentNode(element) {\n    if (getNodeName(element) === 'html') {\n      return element;\n    }\n\n    return (// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle\n      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n      element.parentNode || // DOM Element detected\n      // $FlowFixMe: need a better way to handle this...\n      element.host || // ShadowRoot detected\n      // $FlowFixMe: HTMLElement is a Node\n      getDocumentElement(element) // fallback\n\n    );\n  }\n\n  function getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle$1(element).position === 'fixed') {\n      return null;\n    }\n\n    var offsetParent = element.offsetParent;\n\n    if (offsetParent) {\n      var html = getDocumentElement(offsetParent);\n\n      if (getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && getComputedStyle$1(html).position !== 'static') {\n        return html;\n      }\n    }\n\n    return offsetParent;\n  } // `.offsetParent` reports `null` for fixed elements, while absolute elements\n  // return the containing block\n\n\n  function getContainingBlock(element) {\n    var currentNode = getParentNode(element);\n\n    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n      // create a containing block.\n\n      if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {\n        return currentNode;\n      } else {\n        currentNode = currentNode.parentNode;\n      }\n    }\n\n    return null;\n  } // Gets the closest ancestor positioned element. Handles some edge cases,\n  // such as table ancestors and cross browser bugs.\n\n\n  function getOffsetParent(element) {\n    var window = getWindow(element);\n    var offsetParent = getTrueOffsetParent(element);\n\n    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n      offsetParent = getTrueOffsetParent(offsetParent);\n    }\n\n    if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static') {\n      return window;\n    }\n\n    return offsetParent || getContainingBlock(element) || window;\n  }\n\n  function getMainAxisFromPlacement(placement) {\n    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n  }\n\n  function within(min, value, max) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  function getFreshSideObject() {\n    return {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n\n  function mergePaddingObject(paddingObject) {\n    return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);\n  }\n\n  function expandToHashMap(value, keys) {\n    return keys.reduce(function (hashMap, key) {\n      hashMap[key] = value;\n      return hashMap;\n    }, {});\n  }\n\n  function arrow(_ref) {\n    var _state$modifiersData$;\n\n    var state = _ref.state,\n        name = _ref.name;\n    var arrowElement = state.elements.arrow;\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var basePlacement = getBasePlacement(state.placement);\n    var axis = getMainAxisFromPlacement(basePlacement);\n    var isVertical = [left, right].indexOf(basePlacement) >= 0;\n    var len = isVertical ? 'height' : 'width';\n\n    if (!arrowElement || !popperOffsets) {\n      return;\n    }\n\n    var paddingObject = state.modifiersData[name + \"#persistent\"].padding;\n    var arrowRect = getLayoutRect(arrowElement);\n    var minProp = axis === 'y' ? top : left;\n    var maxProp = axis === 'y' ? bottom : right;\n    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n    var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n    var arrowOffsetParent = getOffsetParent(arrowElement);\n    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n\n    var min = paddingObject[minProp];\n    var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n    var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n    var axisProp = axis;\n    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n  }\n\n  function effect$1(_ref2) {\n    var state = _ref2.state,\n        options = _ref2.options,\n        name = _ref2.name;\n    var _options$element = options.element,\n        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,\n        _options$padding = options.padding,\n        padding = _options$padding === void 0 ? 0 : _options$padding;\n\n    if (arrowElement == null) {\n      return;\n    } // CSS selector\n\n\n    if (typeof arrowElement === 'string') {\n      arrowElement = state.elements.popper.querySelector(arrowElement);\n\n      if (!arrowElement) {\n        return;\n      }\n    }\n\n    if (!contains(state.elements.popper, arrowElement)) {\n      return;\n    }\n\n    state.elements.arrow = arrowElement;\n    state.modifiersData[name + \"#persistent\"] = {\n      padding: mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements))\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var arrow$1 = {\n    name: 'arrow',\n    enabled: true,\n    phase: 'main',\n    fn: arrow,\n    effect: effect$1,\n    requires: ['popperOffsets'],\n    requiresIfExists: ['preventOverflow']\n  };\n  var unsetSides = {\n    top: 'auto',\n    right: 'auto',\n    bottom: 'auto',\n    left: 'auto'\n  }; // Round the offsets to the nearest suitable subpixel based on the DPR.\n  // Zooming can change the DPR, but it seems to report a value that will\n  // cleanly divide the values into the appropriate subpixels.\n\n  function roundOffsets(_ref) {\n    var x = _ref.x,\n        y = _ref.y;\n    var win = window;\n    var dpr = win.devicePixelRatio || 1;\n    return {\n      x: Math.round(x * dpr) / dpr || 0,\n      y: Math.round(y * dpr) / dpr || 0\n    };\n  }\n\n  function mapToStyles(_ref2) {\n    var _Object$assign2;\n\n    var popper = _ref2.popper,\n        popperRect = _ref2.popperRect,\n        placement = _ref2.placement,\n        offsets = _ref2.offsets,\n        position = _ref2.position,\n        gpuAcceleration = _ref2.gpuAcceleration,\n        adaptive = _ref2.adaptive;\n\n    var _roundOffsets = roundOffsets(offsets),\n        x = _roundOffsets.x,\n        y = _roundOffsets.y;\n\n    var hasX = offsets.hasOwnProperty('x');\n    var hasY = offsets.hasOwnProperty('y');\n    var sideX = left;\n    var sideY = top;\n    var win = window;\n\n    if (adaptive) {\n      var offsetParent = getOffsetParent(popper);\n\n      if (offsetParent === getWindow(popper)) {\n        offsetParent = getDocumentElement(popper);\n      } // $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n      /*:: offsetParent = (offsetParent: Element); */\n\n\n      if (placement === top) {\n        sideY = bottom;\n        y -= offsetParent.clientHeight - popperRect.height;\n        y *= gpuAcceleration ? 1 : -1;\n      }\n\n      if (placement === left) {\n        sideX = right;\n        x -= offsetParent.clientWidth - popperRect.width;\n        x *= gpuAcceleration ? 1 : -1;\n      }\n    }\n\n    var commonStyles = Object.assign({\n      position: position\n    }, adaptive && unsetSides);\n\n    if (gpuAcceleration) {\n      var _Object$assign;\n\n      return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n    }\n\n    return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n  }\n\n  function computeStyles(_ref3) {\n    var state = _ref3.state,\n        options = _ref3.options;\n    var _options$gpuAccelerat = options.gpuAcceleration,\n        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n        _options$adaptive = options.adaptive,\n        adaptive = _options$adaptive === void 0 ? true : _options$adaptive;\n    var commonStyles = {\n      placement: getBasePlacement(state.placement),\n      popper: state.elements.popper,\n      popperRect: state.rects.popper,\n      gpuAcceleration: gpuAcceleration\n    };\n\n    if (state.modifiersData.popperOffsets != null) {\n      state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {\n        offsets: state.modifiersData.popperOffsets,\n        position: state.options.strategy,\n        adaptive: adaptive\n      })));\n    }\n\n    if (state.modifiersData.arrow != null) {\n      state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {\n        offsets: state.modifiersData.arrow,\n        position: 'absolute',\n        adaptive: false\n      })));\n    }\n\n    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {\n      'data-popper-placement': state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var computeStyles$1 = {\n    name: 'computeStyles',\n    enabled: true,\n    phase: 'beforeWrite',\n    fn: computeStyles,\n    data: {}\n  };\n  var passive = {\n    passive: true\n  };\n\n  function effect$2(_ref) {\n    var state = _ref.state,\n        instance = _ref.instance,\n        options = _ref.options;\n    var _options$scroll = options.scroll,\n        scroll = _options$scroll === void 0 ? true : _options$scroll,\n        _options$resize = options.resize,\n        resize = _options$resize === void 0 ? true : _options$resize;\n    var window = getWindow(state.elements.popper);\n    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.addEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.addEventListener('resize', instance.update, passive);\n    }\n\n    return function () {\n      if (scroll) {\n        scrollParents.forEach(function (scrollParent) {\n          scrollParent.removeEventListener('scroll', instance.update, passive);\n        });\n      }\n\n      if (resize) {\n        window.removeEventListener('resize', instance.update, passive);\n      }\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var eventListeners = {\n    name: 'eventListeners',\n    enabled: true,\n    phase: 'write',\n    fn: function fn() {},\n    effect: effect$2,\n    data: {}\n  };\n  var hash = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n\n  function getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash[matched];\n    });\n  }\n\n  var hash$1 = {\n    start: 'end',\n    end: 'start'\n  };\n\n  function getOppositeVariationPlacement(placement) {\n    return placement.replace(/start|end/g, function (matched) {\n      return hash$1[matched];\n    });\n  }\n\n  function getBoundingClientRect(element) {\n    var rect = element.getBoundingClientRect();\n    return {\n      width: rect.width,\n      height: rect.height,\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      x: rect.left,\n      y: rect.top\n    };\n  }\n\n  function getWindowScroll(node) {\n    var win = getWindow(node);\n    var scrollLeft = win.pageXOffset;\n    var scrollTop = win.pageYOffset;\n    return {\n      scrollLeft: scrollLeft,\n      scrollTop: scrollTop\n    };\n  }\n\n  function getWindowScrollBarX(element) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n  }\n\n  function getViewportRect(element) {\n    var win = getWindow(element);\n    var html = getDocumentElement(element);\n    var visualViewport = win.visualViewport;\n    var width = html.clientWidth;\n    var height = html.clientHeight;\n    var x = 0;\n    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n    // can be obscured underneath it.\n    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n    // if it isn't open, so if this isn't available, the popper will be detected\n    // to overflow the bottom of the screen too early.\n\n    if (visualViewport) {\n      width = visualViewport.width;\n      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n      // errors due to floating point numbers, so we need to check precision.\n      // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n      // Feature detection fails in mobile emulation mode in Chrome.\n      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n      // 0.001\n      // Fallback here: \"Not Safari\" userAgent\n\n      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        x = visualViewport.offsetLeft;\n        y = visualViewport.offsetTop;\n      }\n    }\n\n    return {\n      width: width,\n      height: height,\n      x: x + getWindowScrollBarX(element),\n      y: y\n    };\n  } // of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\n\n  function getDocumentRect(element) {\n    var html = getDocumentElement(element);\n    var winScroll = getWindowScroll(element);\n    var body = element.ownerDocument.body;\n    var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n    var y = -winScroll.scrollTop;\n\n    if (getComputedStyle$1(body || html).direction === 'rtl') {\n      x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n\n    return {\n      width: width,\n      height: height,\n      x: x,\n      y: y\n    };\n  }\n\n  function isScrollParent(element) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle = getComputedStyle$1(element),\n        overflow = _getComputedStyle.overflow,\n        overflowX = _getComputedStyle.overflowX,\n        overflowY = _getComputedStyle.overflowY;\n\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n  }\n\n  function getScrollParent(node) {\n    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n      // $FlowFixMe: assume body is always available\n      return node.ownerDocument.body;\n    }\n\n    if (isHTMLElement(node) && isScrollParent(node)) {\n      return node;\n    }\n\n    return getScrollParent(getParentNode(node));\n  }\n  /*\r\n  given a DOM element, return the list of all scroll parents, up the list of ancesors\r\n  until we get to the top window object. This list is what we attach scroll listeners\r\n  to, because if any of these parent elements scroll, we'll need to re-calculate the \r\n  reference element's position.\r\n  */\n\n\n  function listScrollParents(element, list) {\n    if (list === void 0) {\n      list = [];\n    }\n\n    var scrollParent = getScrollParent(element);\n    var isBody = getNodeName(scrollParent) === 'body';\n    var win = getWindow(scrollParent);\n    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n    var updatedList = list.concat(target);\n    return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here\n    updatedList.concat(listScrollParents(getParentNode(target)));\n  }\n\n  function rectToClientRect(rect) {\n    return Object.assign(Object.assign({}, rect), {}, {\n      left: rect.x,\n      top: rect.y,\n      right: rect.x + rect.width,\n      bottom: rect.y + rect.height\n    });\n  }\n\n  function getInnerBoundingClientRect(element) {\n    var rect = getBoundingClientRect(element);\n    rect.top = rect.top + element.clientTop;\n    rect.left = rect.left + element.clientLeft;\n    rect.bottom = rect.top + element.clientHeight;\n    rect.right = rect.left + element.clientWidth;\n    rect.width = element.clientWidth;\n    rect.height = element.clientHeight;\n    rect.x = rect.left;\n    rect.y = rect.top;\n    return rect;\n  }\n\n  function getClientRectFromMixedType(element, clippingParent) {\n    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n  } // A \"clipping parent\" is an overflowable container with the characteristic of\n  // clipping (or hiding) overflowing elements with a position different from\n  // `initial`\n\n\n  function getClippingParents(element) {\n    var clippingParents = listScrollParents(getParentNode(element));\n    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;\n    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n    if (!isElement$1(clipperElement)) {\n      return [];\n    } // $FlowFixMe: https://github.com/facebook/flow/issues/1414\n\n\n    return clippingParents.filter(function (clippingParent) {\n      return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n    });\n  } // Gets the maximum area that the element is visible in due to any number of\n  // clipping parents\n\n\n  function getClippingRect(element, boundary, rootBoundary) {\n    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n    var firstClippingParent = clippingParents[0];\n    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n      var rect = getClientRectFromMixedType(element, clippingParent);\n      accRect.top = Math.max(rect.top, accRect.top);\n      accRect.right = Math.min(rect.right, accRect.right);\n      accRect.bottom = Math.min(rect.bottom, accRect.bottom);\n      accRect.left = Math.max(rect.left, accRect.left);\n      return accRect;\n    }, getClientRectFromMixedType(element, firstClippingParent));\n    clippingRect.width = clippingRect.right - clippingRect.left;\n    clippingRect.height = clippingRect.bottom - clippingRect.top;\n    clippingRect.x = clippingRect.left;\n    clippingRect.y = clippingRect.top;\n    return clippingRect;\n  }\n\n  function getVariation(placement) {\n    return placement.split('-')[1];\n  }\n\n  function computeOffsets(_ref) {\n    var reference = _ref.reference,\n        element = _ref.element,\n        placement = _ref.placement;\n    var basePlacement = placement ? getBasePlacement(placement) : null;\n    var variation = placement ? getVariation(placement) : null;\n    var commonX = reference.x + reference.width / 2 - element.width / 2;\n    var commonY = reference.y + reference.height / 2 - element.height / 2;\n    var offsets;\n\n    switch (basePlacement) {\n      case top:\n        offsets = {\n          x: commonX,\n          y: reference.y - element.height\n        };\n        break;\n\n      case bottom:\n        offsets = {\n          x: commonX,\n          y: reference.y + reference.height\n        };\n        break;\n\n      case right:\n        offsets = {\n          x: reference.x + reference.width,\n          y: commonY\n        };\n        break;\n\n      case left:\n        offsets = {\n          x: reference.x - element.width,\n          y: commonY\n        };\n        break;\n\n      default:\n        offsets = {\n          x: reference.x,\n          y: reference.y\n        };\n    }\n\n    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n    if (mainAxis != null) {\n      var len = mainAxis === 'y' ? 'height' : 'width';\n\n      switch (variation) {\n        case start:\n          offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n          break;\n\n        case end:\n          offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n          break;\n      }\n    }\n\n    return offsets;\n  }\n\n  function detectOverflow(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        _options$placement = _options.placement,\n        placement = _options$placement === void 0 ? state.placement : _options$placement,\n        _options$boundary = _options.boundary,\n        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n        _options$rootBoundary = _options.rootBoundary,\n        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n        _options$elementConte = _options.elementContext,\n        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n        _options$altBoundary = _options.altBoundary,\n        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n        _options$padding = _options.padding,\n        padding = _options$padding === void 0 ? 0 : _options$padding;\n    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n    var altContext = elementContext === popper ? reference : popper;\n    var referenceElement = state.elements.reference;\n    var popperRect = state.rects.popper;\n    var element = state.elements[altBoundary ? altContext : elementContext];\n    var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n    var referenceClientRect = getBoundingClientRect(referenceElement);\n    var popperOffsets = computeOffsets({\n      reference: referenceClientRect,\n      element: popperRect,\n      strategy: 'absolute',\n      placement: placement\n    });\n    var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets));\n    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n\n    var overflowOffsets = {\n      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n      right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n    if (elementContext === popper && offsetData) {\n      var offset = offsetData[placement];\n      Object.keys(overflowOffsets).forEach(function (key) {\n        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n        overflowOffsets[key] += offset[axis] * multiply;\n      });\n    }\n\n    return overflowOffsets;\n  }\n  /*:: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n  /*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n\n\n  function computeAutoPlacement(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        placement = _options.placement,\n        boundary = _options.boundary,\n        rootBoundary = _options.rootBoundary,\n        padding = _options.padding,\n        flipVariations = _options.flipVariations,\n        _options$allowedAutoP = _options.allowedAutoPlacements,\n        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n    var variation = getVariation(placement);\n    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n      return getVariation(placement) === variation;\n    }) : basePlacements; // $FlowFixMe\n\n    var allowedPlacements = placements$1.filter(function (placement) {\n      return allowedAutoPlacements.indexOf(placement) >= 0;\n    });\n\n    if (allowedPlacements.length === 0) {\n      allowedPlacements = placements$1;\n    } // $FlowFixMe: Flow seems to have problems with two array unions...\n\n\n    var overflows = allowedPlacements.reduce(function (acc, placement) {\n      acc[placement] = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding\n      })[getBasePlacement(placement)];\n      return acc;\n    }, {});\n    return Object.keys(overflows).sort(function (a, b) {\n      return overflows[a] - overflows[b];\n    });\n  }\n\n  function getExpandedFallbackPlacements(placement) {\n    if (getBasePlacement(placement) === auto) {\n      return [];\n    }\n\n    var oppositePlacement = getOppositePlacement(placement);\n    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n  }\n\n  function flip(_ref) {\n    var state = _ref.state,\n        options = _ref.options,\n        name = _ref.name;\n\n    if (state.modifiersData[name]._skip) {\n      return;\n    }\n\n    var _options$mainAxis = options.mainAxis,\n        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n        _options$altAxis = options.altAxis,\n        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n        specifiedFallbackPlacements = options.fallbackPlacements,\n        padding = options.padding,\n        boundary = options.boundary,\n        rootBoundary = options.rootBoundary,\n        altBoundary = options.altBoundary,\n        _options$flipVariatio = options.flipVariations,\n        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n        allowedAutoPlacements = options.allowedAutoPlacements;\n    var preferredPlacement = state.options.placement;\n    var basePlacement = getBasePlacement(preferredPlacement);\n    var isBasePlacement = basePlacement === preferredPlacement;\n    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding,\n        flipVariations: flipVariations,\n        allowedAutoPlacements: allowedAutoPlacements\n      }) : placement);\n    }, []);\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var checksMap = new Map();\n    var makeFallbackChecks = true;\n    var firstFittingPlacement = placements[0];\n\n    for (var i = 0; i < placements.length; i++) {\n      var placement = placements[i];\n\n      var _basePlacement = getBasePlacement(placement);\n\n      var isStartVariation = getVariation(placement) === start;\n      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n      var len = isVertical ? 'width' : 'height';\n      var overflow = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        altBoundary: altBoundary,\n        padding: padding\n      });\n      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n      if (referenceRect[len] > popperRect[len]) {\n        mainVariationSide = getOppositePlacement(mainVariationSide);\n      }\n\n      var altVariationSide = getOppositePlacement(mainVariationSide);\n      var checks = [];\n\n      if (checkMainAxis) {\n        checks.push(overflow[_basePlacement] <= 0);\n      }\n\n      if (checkAltAxis) {\n        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n      }\n\n      if (checks.every(function (check) {\n        return check;\n      })) {\n        firstFittingPlacement = placement;\n        makeFallbackChecks = false;\n        break;\n      }\n\n      checksMap.set(placement, checks);\n    }\n\n    if (makeFallbackChecks) {\n      // `2` may be desired in some cases ‚Äì research later\n      var numberOfChecks = flipVariations ? 3 : 1;\n\n      var _loop = function _loop(_i) {\n        var fittingPlacement = placements.find(function (placement) {\n          var checks = checksMap.get(placement);\n\n          if (checks) {\n            return checks.slice(0, _i).every(function (check) {\n              return check;\n            });\n          }\n        });\n\n        if (fittingPlacement) {\n          firstFittingPlacement = fittingPlacement;\n          return \"break\";\n        }\n      };\n\n      for (var _i = numberOfChecks; _i > 0; _i--) {\n        var _ret = _loop(_i);\n\n        if (_ret === \"break\") break;\n      }\n    }\n\n    if (state.placement !== firstFittingPlacement) {\n      state.modifiersData[name]._skip = true;\n      state.placement = firstFittingPlacement;\n      state.reset = true;\n    }\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var flip$1 = {\n    name: 'flip',\n    enabled: true,\n    phase: 'main',\n    fn: flip,\n    requiresIfExists: ['offset'],\n    data: {\n      _skip: false\n    }\n  };\n\n  function getSideOffsets(overflow, rect, preventedOffsets) {\n    if (preventedOffsets === void 0) {\n      preventedOffsets = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    return {\n      top: overflow.top - rect.height - preventedOffsets.y,\n      right: overflow.right - rect.width + preventedOffsets.x,\n      bottom: overflow.bottom - rect.height + preventedOffsets.y,\n      left: overflow.left - rect.width - preventedOffsets.x\n    };\n  }\n\n  function isAnySideFullyClipped(overflow) {\n    return [top, right, bottom, left].some(function (side) {\n      return overflow[side] >= 0;\n    });\n  }\n\n  function hide(_ref) {\n    var state = _ref.state,\n        name = _ref.name;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var preventedOffsets = state.modifiersData.preventOverflow;\n    var referenceOverflow = detectOverflow(state, {\n      elementContext: 'reference'\n    });\n    var popperAltOverflow = detectOverflow(state, {\n      altBoundary: true\n    });\n    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n      referenceClippingOffsets: referenceClippingOffsets,\n      popperEscapeOffsets: popperEscapeOffsets,\n      isReferenceHidden: isReferenceHidden,\n      hasPopperEscaped: hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {\n      'data-popper-reference-hidden': isReferenceHidden,\n      'data-popper-escaped': hasPopperEscaped\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var hide$1 = {\n    name: 'hide',\n    enabled: true,\n    phase: 'main',\n    requiresIfExists: ['preventOverflow'],\n    fn: hide\n  };\n\n  function distanceAndSkiddingToXY(placement, rects, offset) {\n    var basePlacement = getBasePlacement(placement);\n    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n    var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {}, {\n      placement: placement\n    })) : offset,\n        skidding = _ref[0],\n        distance = _ref[1];\n\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [left, right].indexOf(basePlacement) >= 0 ? {\n      x: distance,\n      y: skidding\n    } : {\n      x: skidding,\n      y: distance\n    };\n  }\n\n  function offset(_ref2) {\n    var state = _ref2.state,\n        options = _ref2.options,\n        name = _ref2.name;\n    var _options$offset = options.offset,\n        offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n    var data = placements.reduce(function (acc, placement) {\n      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n      return acc;\n    }, {});\n    var _data$state$placement = data[state.placement],\n        x = _data$state$placement.x,\n        y = _data$state$placement.y;\n\n    if (state.modifiersData.popperOffsets != null) {\n      state.modifiersData.popperOffsets.x += x;\n      state.modifiersData.popperOffsets.y += y;\n    }\n\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var offset$1 = {\n    name: 'offset',\n    enabled: true,\n    phase: 'main',\n    requires: ['popperOffsets'],\n    fn: offset\n  };\n\n  function popperOffsets(_ref) {\n    var state = _ref.state,\n        name = _ref.name; // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n\n    state.modifiersData[name] = computeOffsets({\n      reference: state.rects.reference,\n      element: state.rects.popper,\n      strategy: 'absolute',\n      placement: state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var popperOffsets$1 = {\n    name: 'popperOffsets',\n    enabled: true,\n    phase: 'read',\n    fn: popperOffsets,\n    data: {}\n  };\n\n  function getAltAxis(axis) {\n    return axis === 'x' ? 'y' : 'x';\n  }\n\n  function preventOverflow(_ref) {\n    var state = _ref.state,\n        options = _ref.options,\n        name = _ref.name;\n    var _options$mainAxis = options.mainAxis,\n        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n        _options$altAxis = options.altAxis,\n        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n        boundary = options.boundary,\n        rootBoundary = options.rootBoundary,\n        altBoundary = options.altBoundary,\n        padding = options.padding,\n        _options$tether = options.tether,\n        tether = _options$tether === void 0 ? true : _options$tether,\n        _options$tetherOffset = options.tetherOffset,\n        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n    var overflow = detectOverflow(state, {\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      altBoundary: altBoundary\n    });\n    var basePlacement = getBasePlacement(state.placement);\n    var variation = getVariation(state.placement);\n    var isBasePlacement = !variation;\n    var mainAxis = getMainAxisFromPlacement(basePlacement);\n    var altAxis = getAltAxis(mainAxis);\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {\n      placement: state.placement\n    })) : tetherOffset;\n    var data = {\n      x: 0,\n      y: 0\n    };\n\n    if (!popperOffsets) {\n      return;\n    }\n\n    if (checkMainAxis) {\n      var mainSide = mainAxis === 'y' ? top : left;\n      var altSide = mainAxis === 'y' ? bottom : right;\n      var len = mainAxis === 'y' ? 'height' : 'width';\n      var offset = popperOffsets[mainAxis];\n      var min = popperOffsets[mainAxis] + overflow[mainSide];\n      var max = popperOffsets[mainAxis] - overflow[altSide];\n      var additive = tether ? -popperRect[len] / 2 : 0;\n      var minLen = variation === start ? referenceRect[len] : popperRect[len];\n      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n      // outside the reference bounds\n\n      var arrowElement = state.elements.arrow;\n      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n        width: 0,\n        height: 0\n      };\n      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n      var arrowPaddingMin = arrowPaddingObject[mainSide];\n      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n      // to include its full size in the calculation. If the reference is small\n      // and near the edge of a boundary, the popper can overflow even if the\n      // reference is not overflowing as well (e.g. virtual elements with no\n      // width or height)\n\n      var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n      var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);\n      popperOffsets[mainAxis] = preventedOffset;\n      data[mainAxis] = preventedOffset - offset;\n    }\n\n    if (checkAltAxis) {\n      var _mainSide = mainAxis === 'x' ? top : left;\n\n      var _altSide = mainAxis === 'x' ? bottom : right;\n\n      var _offset = popperOffsets[altAxis];\n\n      var _min = _offset + overflow[_mainSide];\n\n      var _max = _offset - overflow[_altSide];\n\n      var _preventedOffset = within(_min, _offset, _max);\n\n      popperOffsets[altAxis] = _preventedOffset;\n      data[altAxis] = _preventedOffset - _offset;\n    }\n\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var preventOverflow$1 = {\n    name: 'preventOverflow',\n    enabled: true,\n    phase: 'main',\n    fn: preventOverflow,\n    requiresIfExists: ['offset']\n  };\n\n  function getHTMLElementScroll(element) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n\n  function getNodeScroll(node) {\n    if (node === getWindow(node) || !isHTMLElement(node)) {\n      return getWindowScroll(node);\n    } else {\n      return getHTMLElementScroll(node);\n    }\n  } // Composite means it takes into account transforms as well as layout.\n\n\n  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n    if (isFixed === void 0) {\n      isFixed = false;\n    }\n\n    var documentElement = getDocumentElement(offsetParent);\n    var rect = getBoundingClientRect(elementOrVirtualElement);\n    var isOffsetParentAnElement = isHTMLElement(offsetParent);\n    var scroll = {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n    var offsets = {\n      x: 0,\n      y: 0\n    };\n\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n      isScrollParent(documentElement)) {\n        scroll = getNodeScroll(offsetParent);\n      }\n\n      if (isHTMLElement(offsetParent)) {\n        offsets = getBoundingClientRect(offsetParent);\n        offsets.x += offsetParent.clientLeft;\n        offsets.y += offsetParent.clientTop;\n      } else if (documentElement) {\n        offsets.x = getWindowScrollBarX(documentElement);\n      }\n    }\n\n    return {\n      x: rect.left + scroll.scrollLeft - offsets.x,\n      y: rect.top + scroll.scrollTop - offsets.y,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  function order(modifiers) {\n    var map = new Map();\n    var visited = new Set();\n    var result = [];\n    modifiers.forEach(function (modifier) {\n      map.set(modifier.name, modifier);\n    }); // On visiting object, check for its dependencies and visit them recursively\n\n    function sort(modifier) {\n      visited.add(modifier.name);\n      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n      requires.forEach(function (dep) {\n        if (!visited.has(dep)) {\n          var depModifier = map.get(dep);\n\n          if (depModifier) {\n            sort(depModifier);\n          }\n        }\n      });\n      result.push(modifier);\n    }\n\n    modifiers.forEach(function (modifier) {\n      if (!visited.has(modifier.name)) {\n        // check for visited object\n        sort(modifier);\n      }\n    });\n    return result;\n  }\n\n  function orderModifiers(modifiers) {\n    // order based on dependencies\n    var orderedModifiers = order(modifiers); // order based on phase\n\n    return modifierPhases.reduce(function (acc, phase) {\n      return acc.concat(orderedModifiers.filter(function (modifier) {\n        return modifier.phase === phase;\n      }));\n    }, []);\n  }\n\n  function debounce(fn) {\n    var pending;\n    return function () {\n      if (!pending) {\n        pending = new Promise(function (resolve) {\n          Promise.resolve().then(function () {\n            pending = undefined;\n            resolve(fn());\n          });\n        });\n      }\n\n      return pending;\n    };\n  }\n\n  function mergeByName(modifiers) {\n    var merged = modifiers.reduce(function (merged, current) {\n      var existing = merged[current.name];\n      merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {\n        options: Object.assign(Object.assign({}, existing.options), current.options),\n        data: Object.assign(Object.assign({}, existing.data), current.data)\n      }) : current;\n      return merged;\n    }, {}); // IE11 does not support Object.values\n\n    return Object.keys(merged).map(function (key) {\n      return merged[key];\n    });\n  }\n\n  var DEFAULT_OPTIONS = {\n    placement: 'bottom',\n    modifiers: [],\n    strategy: 'absolute'\n  };\n\n  function areValidElements() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return !args.some(function (element) {\n      return !(element && typeof element.getBoundingClientRect === 'function');\n    });\n  }\n\n  function popperGenerator(generatorOptions) {\n    if (generatorOptions === void 0) {\n      generatorOptions = {};\n    }\n\n    var _generatorOptions = generatorOptions,\n        _generatorOptions$def = _generatorOptions.defaultModifiers,\n        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n        _generatorOptions$def2 = _generatorOptions.defaultOptions,\n        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n    return function createPopper(reference, popper, options) {\n      if (options === void 0) {\n        options = defaultOptions;\n      }\n\n      var state = {\n        placement: 'bottom',\n        orderedModifiers: [],\n        options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),\n        modifiersData: {},\n        elements: {\n          reference: reference,\n          popper: popper\n        },\n        attributes: {},\n        styles: {}\n      };\n      var effectCleanupFns = [];\n      var isDestroyed = false;\n      var instance = {\n        state: state,\n        setOptions: function setOptions(options) {\n          cleanupModifierEffects();\n          state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);\n          state.scrollParents = {\n            reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n            popper: listScrollParents(popper)\n          }; // Orders the modifiers based on their dependencies and `phase`\n          // properties\n\n          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n          state.orderedModifiers = orderedModifiers.filter(function (m) {\n            return m.enabled;\n          }); // Validate the provided modifiers so that the consumer will get warned\n\n          runModifierEffects();\n          return instance.update();\n        },\n        // Sync update ‚Äì it will always be executed, even if not necessary. This\n        // is useful for low frequency updates where sync behavior simplifies the\n        // logic.\n        // For high frequency updates (e.g. `resize` and `scroll` events), always\n        // prefer the async Popper#update method\n        forceUpdate: function forceUpdate() {\n          if (isDestroyed) {\n            return;\n          }\n\n          var _state$elements = state.elements,\n              reference = _state$elements.reference,\n              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n          // anymore\n\n          if (!areValidElements(reference, popper)) {\n            return;\n          } // Store the reference and popper rects to be read by modifiers\n\n\n          state.rects = {\n            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n            popper: getLayoutRect(popper)\n          }; // Modifiers have the ability to reset the current update cycle. The\n          // most common use case for this is the `flip` modifier changing the\n          // placement, which then needs to re-run all the modifiers, because the\n          // logic was previously ran for the previous placement and is therefore\n          // stale/incorrect\n\n          state.reset = false;\n          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n          // is filled with the initial data specified by the modifier. This means\n          // it doesn't persist and is fresh on each update.\n          // To ensure persistent data, use `${name}#persistent`\n\n          state.orderedModifiers.forEach(function (modifier) {\n            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n          });\n\n          for (var index = 0; index < state.orderedModifiers.length; index++) {\n            if (state.reset === true) {\n              state.reset = false;\n              index = -1;\n              continue;\n            }\n\n            var _state$orderedModifie = state.orderedModifiers[index],\n                fn = _state$orderedModifie.fn,\n                _state$orderedModifie2 = _state$orderedModifie.options,\n                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n                name = _state$orderedModifie.name;\n\n            if (typeof fn === 'function') {\n              state = fn({\n                state: state,\n                options: _options,\n                name: name,\n                instance: instance\n              }) || state;\n            }\n          }\n        },\n        // Async and optimistically optimized update ‚Äì it will not be executed if\n        // not necessary (debounced to run at most once-per-tick)\n        update: debounce(function () {\n          return new Promise(function (resolve) {\n            instance.forceUpdate();\n            resolve(state);\n          });\n        }),\n        destroy: function destroy() {\n          cleanupModifierEffects();\n          isDestroyed = true;\n        }\n      };\n\n      if (!areValidElements(reference, popper)) {\n        return instance;\n      }\n\n      instance.setOptions(options).then(function (state) {\n        if (!isDestroyed && options.onFirstUpdate) {\n          options.onFirstUpdate(state);\n        }\n      }); // Modifiers have the ability to execute arbitrary code before the first\n      // update cycle runs. They will be executed in the same order as the update\n      // cycle. This is useful when a modifier adds some persistent data that\n      // other modifiers need to use, but the modifier is run after the dependent\n      // one.\n\n      function runModifierEffects() {\n        state.orderedModifiers.forEach(function (_ref3) {\n          var name = _ref3.name,\n              _ref3$options = _ref3.options,\n              options = _ref3$options === void 0 ? {} : _ref3$options,\n              effect = _ref3.effect;\n\n          if (typeof effect === 'function') {\n            var cleanupFn = effect({\n              state: state,\n              name: name,\n              instance: instance,\n              options: options\n            });\n\n            var noopFn = function noopFn() {};\n\n            effectCleanupFns.push(cleanupFn || noopFn);\n          }\n        });\n      }\n\n      function cleanupModifierEffects() {\n        effectCleanupFns.forEach(function (fn) {\n          return fn();\n        });\n        effectCleanupFns = [];\n      }\n\n      return instance;\n    };\n  }\n\n  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];\n  var createPopper = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var NAME$6 = 'dropdown';\n  var VERSION$6 = '3.2.2';\n  var DATA_KEY$6 = 'coreui.dropdown';\n  var EVENT_KEY$6 = \".\" + DATA_KEY$6;\n  var DATA_API_KEY$6 = '.data-api';\n  var ESCAPE_KEY = 'Escape';\n  var SPACE_KEY = 'Space';\n  var TAB_KEY = 'Tab';\n  var ARROW_UP_KEY = 'ArrowUp';\n  var ARROW_DOWN_KEY = 'ArrowDown';\n  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEY + \"|\" + ARROW_DOWN_KEY + \"|\" + ESCAPE_KEY);\n  var EVENT_HIDE$1 = \"hide\" + EVENT_KEY$6;\n  var EVENT_HIDDEN$1 = \"hidden\" + EVENT_KEY$6;\n  var EVENT_SHOW$1 = \"show\" + EVENT_KEY$6;\n  var EVENT_SHOWN$1 = \"shown\" + EVENT_KEY$6;\n  var EVENT_CLICK = \"click\" + EVENT_KEY$6;\n  var EVENT_CLICK_DATA_API$6 = \"click\" + EVENT_KEY$6 + DATA_API_KEY$6;\n  var EVENT_KEYDOWN_DATA_API = \"keydown\" + EVENT_KEY$6 + DATA_API_KEY$6;\n  var EVENT_KEYUP_DATA_API = \"keyup\" + EVENT_KEY$6 + DATA_API_KEY$6;\n  var CLASS_NAME_DISABLED$1 = 'disabled';\n  var CLASS_NAME_SHOW$2 = 'show';\n  var CLASS_NAME_DROPUP = 'dropup';\n  var CLASS_NAME_DROPRIGHT = 'dropright';\n  var CLASS_NAME_DROPLEFT = 'dropleft';\n  var CLASS_NAME_HEADER = 'c-header';\n  var CLASS_NAME_MENURIGHT = 'dropdown-menu-right';\n  var CLASS_NAME_NAVBAR = 'navbar';\n  var CLASS_NAME_POSITION_STATIC = 'position-static';\n  var SELECTOR_DATA_TOGGLE$2 = '[data-toggle=\"dropdown\"]';\n  var SELECTOR_FORM_CHILD = '.dropdown form';\n  var SELECTOR_HEADER_NAV = '.c-header-nav';\n  var SELECTOR_MENU = '.dropdown-menu';\n  var SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  var PLACEMENT_TOP = 'top-start';\n  var PLACEMENT_TOPEND = 'top-end';\n  var PLACEMENT_BOTTOM = 'bottom-start';\n  var PLACEMENT_BOTTOMEND = 'bottom-end';\n  var PLACEMENT_RIGHT = 'right-start';\n  var PLACEMENT_LEFT = 'left-start';\n  var Default$4 = {\n    offset: [0, 0],\n    flip: true,\n    boundary: 'scrollParent',\n    reference: 'toggle',\n    display: 'dynamic',\n    popperConfig: null\n  };\n  var DefaultType$3 = {\n    offset: '(array|function)',\n    flip: 'boolean',\n    boundary: '(string|element)',\n    reference: '(string|element)',\n    display: 'string',\n    popperConfig: '(null|object)'\n  };\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Dropdown = /*#__PURE__*/function () {\n    function Dropdown(element, config) {\n      this._element = element;\n      this._popper = null;\n      this._config = this._getConfig(config);\n      this._menu = this._getMenuElement();\n      this._inNavbar = this._detectNavbar();\n      this._inHeader = this._detectHeader();\n\n      this._addEventListeners();\n\n      Data.setData(element, DATA_KEY$6, this);\n    } // Getters\n\n\n    var _proto = Dropdown.prototype; // Public\n\n    _proto.toggle = function toggle() {\n      if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED$1)) {\n        return;\n      }\n\n      var isActive = this._menu.classList.contains(CLASS_NAME_SHOW$2);\n\n      Dropdown.clearMenus();\n\n      if (isActive) {\n        return;\n      }\n\n      this.show();\n    };\n\n    _proto.show = function show() {\n      if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED$1) || this._menu.classList.contains(CLASS_NAME_SHOW$2)) {\n        return;\n      }\n\n      var parent = Dropdown.getParentFromElement(this._element);\n      var relatedTarget = {\n        relatedTarget: this._element\n      };\n      var showEvent = EventHandler.trigger(parent, EVENT_SHOW$1, relatedTarget);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      } // Disable totally Popper.js for Dropdown in Navbar\n\n\n      if (!this._inNavbar && !this._inHeader) {\n        if (typeof createPopper === 'undefined') {\n          throw new TypeError('CoreUI\\'s dropdowns require Popper.js (https://popper.js.org)');\n        }\n\n        var referenceElement = this._element;\n\n        if (this._config.reference === 'parent') {\n          referenceElement = parent;\n        } else if (isElement(this._config.reference)) {\n          referenceElement = this._config.reference; // Check if it's jQuery element\n\n          if (typeof this._config.reference.jquery !== 'undefined') {\n            referenceElement = this._config.reference[0];\n          }\n        } // If boundary is not `scrollParent`, then set position to `static`\n        // to allow the menu to \"escape\" the scroll parent's boundaries\n        // https://github.com/twbs/bootstrap/issues/24251\n\n\n        if (this._config.boundary !== 'scrollParent') {\n          parent.classList.add(CLASS_NAME_POSITION_STATIC);\n        }\n\n        this._popper = createPopper(referenceElement, this._menu, this._getPopperConfig());\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {\n        var _ref;\n\n        (_ref = []).concat.apply(_ref, document.body.children).forEach(function (elem) {\n          return EventHandler.on(elem, 'mouseover', null, noop());\n        });\n      }\n\n      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_HEADER_NAV)) {\n        var _ref2;\n\n        (_ref2 = []).concat.apply(_ref2, document.body.children).forEach(function (elem) {\n          return EventHandler.on(elem, 'mouseover', null, noop());\n        });\n      }\n\n      this._element.focus();\n\n      this._element.setAttribute('aria-expanded', true);\n\n      Manipulator.toggleClass(this._menu, CLASS_NAME_SHOW$2);\n      Manipulator.toggleClass(parent, CLASS_NAME_SHOW$2);\n      EventHandler.trigger(parent, EVENT_SHOWN$1, relatedTarget);\n    };\n\n    _proto.hide = function hide() {\n      if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED$1) || !this._menu.classList.contains(CLASS_NAME_SHOW$2)) {\n        return;\n      }\n\n      var parent = Dropdown.getParentFromElement(this._element);\n      var relatedTarget = {\n        relatedTarget: this._element\n      };\n      var hideEvent = EventHandler.trigger(parent, EVENT_HIDE$1, relatedTarget);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      Manipulator.toggleClass(this._menu, CLASS_NAME_SHOW$2);\n      Manipulator.toggleClass(parent, CLASS_NAME_SHOW$2);\n      EventHandler.trigger(parent, EVENT_HIDDEN$1, relatedTarget);\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$6);\n      EventHandler.off(this._element, EVENT_KEY$6);\n      this._element = null;\n      this._menu = null;\n\n      if (this._popper) {\n        this._popper.destroy();\n\n        this._popper = null;\n      }\n    };\n\n    _proto.update = function update() {\n      this._inNavbar = this._detectNavbar();\n      this._inHeader = this._detectHeader();\n\n      if (this._popper) {\n        this._popper.update();\n      }\n    } // Private\n    ;\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this = this;\n\n      EventHandler.on(this._element, EVENT_CLICK, function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _this.toggle();\n      });\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);\n      typeCheckConfig(NAME$6, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._getMenuElement = function _getMenuElement() {\n      var parent = Dropdown.getParentFromElement(this._element);\n      return SelectorEngine.findOne(SELECTOR_MENU, parent);\n    };\n\n    _proto._getPlacement = function _getPlacement() {\n      var parentDropdown = this._element.parentNode;\n      var placement = PLACEMENT_BOTTOM; // Handle dropup\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n        placement = PLACEMENT_TOP;\n\n        if (this._menu.classList.contains(CLASS_NAME_MENURIGHT)) {\n          placement = PLACEMENT_TOPEND;\n        }\n      } else if (parentDropdown.classList.contains(CLASS_NAME_DROPRIGHT)) {\n        placement = PLACEMENT_RIGHT;\n      } else if (parentDropdown.classList.contains(CLASS_NAME_DROPLEFT)) {\n        placement = PLACEMENT_LEFT;\n      } else if (this._menu.classList.contains(CLASS_NAME_MENURIGHT)) {\n        placement = PLACEMENT_BOTTOMEND;\n      }\n\n      return placement;\n    };\n\n    _proto._detectNavbar = function _detectNavbar() {\n      return Boolean(this._element.closest(\".\" + CLASS_NAME_NAVBAR));\n    };\n\n    _proto._detectHeader = function _detectHeader() {\n      return Boolean(this._element.closest(\".\" + CLASS_NAME_HEADER));\n    };\n\n    _proto._getOffset = function _getOffset() {\n      var _this2 = this;\n\n      var offset = [];\n\n      if (typeof this._config.offset === 'function') {\n        offset = function offset(_ref3) {\n          var placement = _ref3.placement,\n              reference = _ref3.reference,\n              popper = _ref3.popper;\n          return _this2._config.offset({\n            placement: placement,\n            reference: reference,\n            popper: popper\n          });\n        };\n      } else {\n        offset = this._config.offset;\n      }\n\n      return offset;\n    };\n\n    _proto._getPopperConfig = function _getPopperConfig() {\n      var popperConfig = {\n        placement: this._getPlacement(),\n        modifiers: [{\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        }, {\n          name: 'flip',\n          enabled: this._config.flip\n        }, {\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        }]\n      }; // Disable Popper.js if we have a static display\n\n      if (this._config.display === 'static') {\n        popperConfig.modifiers = {\n          name: 'applyStyles',\n          enabled: false\n        };\n      }\n\n      return _objectSpread2(_objectSpread2({}, popperConfig), this._config.popperConfig);\n    } // Static\n    ;\n\n    Dropdown.dropdownInterface = function dropdownInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$6);\n\n      var _config = _typeof(config) === 'object' ? config : null;\n\n      if (!data) {\n        data = new Dropdown(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    Dropdown.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Dropdown.dropdownInterface(this, config);\n      });\n    };\n\n    Dropdown.clearMenus = function clearMenus(event) {\n      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY)) {\n        return;\n      }\n\n      var toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$2);\n\n      for (var i = 0, len = toggles.length; i < len; i++) {\n        var parent = Dropdown.getParentFromElement(toggles[i]);\n        var context = Data.getData(toggles[i], DATA_KEY$6);\n        var relatedTarget = {\n          relatedTarget: toggles[i]\n        };\n\n        if (event && event.type === 'click') {\n          relatedTarget.clickEvent = event;\n        }\n\n        if (!context) {\n          continue;\n        }\n\n        var dropdownMenu = context._menu;\n\n        if (!parent.classList.contains(CLASS_NAME_SHOW$2)) {\n          continue;\n        }\n\n        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.key === TAB_KEY) && parent.contains(event.target)) {\n          continue;\n        }\n\n        var hideEvent = EventHandler.trigger(parent, EVENT_HIDE$1, relatedTarget);\n\n        if (hideEvent.defaultPrevented) {\n          continue;\n        } // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref4;\n\n          (_ref4 = []).concat.apply(_ref4, document.body.children).forEach(function (elem) {\n            return EventHandler.off(elem, 'mouseover', null, noop());\n          });\n        }\n\n        toggles[i].setAttribute('aria-expanded', 'false');\n\n        if (context._popper) {\n          context._popper.destroy();\n        }\n\n        dropdownMenu.classList.remove(CLASS_NAME_SHOW$2);\n        parent.classList.remove(CLASS_NAME_SHOW$2);\n        EventHandler.trigger(parent, EVENT_HIDDEN$1, relatedTarget);\n      }\n    };\n\n    Dropdown.getParentFromElement = function getParentFromElement(element) {\n      return getElementFromSelector(element) || element.parentNode;\n    };\n\n    Dropdown.dataApiKeydownHandler = function dataApiKeydownHandler(event) {\n      // If not input/textarea:\n      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n      // If input/textarea:\n      //  - If space key => not a dropdown command\n      //  - If key is other than escape\n      //    - If key is not up or down => not a dropdown command\n      //    - If trigger inside the menu => not a dropdown command\n      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.disabled || this.classList.contains(CLASS_NAME_DISABLED$1)) {\n        return;\n      }\n\n      var parent = Dropdown.getParentFromElement(this);\n      var isActive = parent.classList.contains(CLASS_NAME_SHOW$2);\n\n      if (event.key === ESCAPE_KEY) {\n        var button = this.matches(SELECTOR_DATA_TOGGLE$2) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$2)[0];\n        button.focus();\n        Dropdown.clearMenus();\n        return;\n      }\n\n      if (!isActive || event.key === SPACE_KEY) {\n        Dropdown.clearMenus();\n        return;\n      }\n\n      var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, parent).filter(isVisible);\n\n      if (!items.length) {\n        return;\n      }\n\n      var index = items.indexOf(event.target);\n\n      if (event.key === ARROW_UP_KEY && index > 0) {\n        // Up\n        index--;\n      }\n\n      if (event.key === ARROW_DOWN_KEY && index < items.length - 1) {\n        // Down\n        index++;\n      } // index is -1 if the first keydown is an ArrowUp\n\n\n      index = index === -1 ? 0 : index;\n      items[index].focus();\n    };\n\n    Dropdown.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$6);\n    };\n\n    _createClass(Dropdown, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$6;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$4;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$3;\n      }\n    }]);\n\n    return Dropdown;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$2, function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    Dropdown.dropdownInterface(this, 'toggle');\n  });\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_FORM_CHILD, function (e) {\n    return e.stopPropagation();\n  });\n  var $$7 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .dropdown to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$7) {\n    var JQUERY_NO_CONFLICT$6 = $$7.fn[NAME$6];\n    $$7.fn[NAME$6] = Dropdown.jQueryInterface;\n    $$7.fn[NAME$6].Constructor = Dropdown;\n\n    $$7.fn[NAME$6].noConflict = function () {\n      $$7.fn[NAME$6] = JQUERY_NO_CONFLICT$6;\n      return Dropdown.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$7 = 'modal';\n  var VERSION$7 = '3.2.2';\n  var DATA_KEY$7 = 'coreui.modal';\n  var EVENT_KEY$7 = \".\" + DATA_KEY$7;\n  var DATA_API_KEY$7 = '.data-api';\n  var ESCAPE_KEY$1 = 'Escape';\n  var Default$5 = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: true\n  };\n  var DefaultType$4 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean',\n    show: 'boolean'\n  };\n  var EVENT_HIDE$2 = \"hide\" + EVENT_KEY$7;\n  var EVENT_HIDE_PREVENTED = \"hidePrevented\" + EVENT_KEY$7;\n  var EVENT_HIDDEN$2 = \"hidden\" + EVENT_KEY$7;\n  var EVENT_SHOW$2 = \"show\" + EVENT_KEY$7;\n  var EVENT_SHOWN$2 = \"shown\" + EVENT_KEY$7;\n  var EVENT_FOCUSIN = \"focusin\" + EVENT_KEY$7;\n  var EVENT_RESIZE = \"resize\" + EVENT_KEY$7;\n  var EVENT_CLICK_DISMISS = \"click.dismiss\" + EVENT_KEY$7;\n  var EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\" + EVENT_KEY$7;\n  var EVENT_MOUSEUP_DISMISS = \"mouseup.dismiss\" + EVENT_KEY$7;\n  var EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\" + EVENT_KEY$7;\n  var EVENT_CLICK_DATA_API$7 = \"click\" + EVENT_KEY$7 + DATA_API_KEY$7;\n  var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';\n  var CLASS_NAME_BACKDROP = 'modal-backdrop';\n  var CLASS_NAME_OPEN = 'modal-open';\n  var CLASS_NAME_FADE = 'fade';\n  var CLASS_NAME_SHOW$3 = 'show';\n  var CLASS_NAME_STATIC = 'modal-static';\n  var SELECTOR_DIALOG = '.modal-dialog';\n  var SELECTOR_MODAL_BODY = '.modal-body';\n  var SELECTOR_DATA_TOGGLE$3 = '[data-toggle=\"modal\"]';\n  var SELECTOR_DATA_DISMISS = '[data-dismiss=\"modal\"]';\n  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  var SELECTOR_STICKY_CONTENT = '.sticky-top';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(element, config) {\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, element);\n      this._backdrop = null;\n      this._isShown = false;\n      this._isBodyOverflowing = false;\n      this._ignoreBackdropClick = false;\n      this._isTransitioning = false;\n      this._scrollbarWidth = 0;\n      Data.setData(element, DATA_KEY$7, this);\n    } // Getters\n\n\n    var _proto = Modal.prototype; // Public\n\n    _proto.toggle = function toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    };\n\n    _proto.show = function show(relatedTarget) {\n      var _this = this;\n\n      if (this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      if (this._element.classList.contains(CLASS_NAME_FADE)) {\n        this._isTransitioning = true;\n      }\n\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {\n        relatedTarget: relatedTarget\n      });\n\n      if (this._isShown || showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = true;\n\n      this._checkScrollbar();\n\n      this._setScrollbar();\n\n      this._adjustDialog();\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      EventHandler.on(this._element, EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) {\n        return _this.hide(event);\n      });\n      EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, function () {\n        EventHandler.one(_this._element, EVENT_MOUSEUP_DISMISS, function (event) {\n          if (event.target === _this._element) {\n            _this._ignoreBackdropClick = true;\n          }\n        });\n      });\n\n      this._showBackdrop(function () {\n        return _this._showElement(relatedTarget);\n      });\n    };\n\n    _proto.hide = function hide(event) {\n      var _this2 = this;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = false;\n\n      var transition = this._element.classList.contains(CLASS_NAME_FADE);\n\n      if (transition) {\n        this._isTransitioning = true;\n      }\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      EventHandler.off(document, EVENT_FOCUSIN);\n\n      this._element.classList.remove(CLASS_NAME_SHOW$3);\n\n      EventHandler.off(this._element, EVENT_CLICK_DISMISS);\n      EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);\n\n      if (transition) {\n        var transitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, function (event) {\n          return _this2._hideModal(event);\n        });\n        emulateTransitionEnd(this._element, transitionDuration);\n      } else {\n        this._hideModal();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      [window, this._element, this._dialog].forEach(function (htmlElement) {\n        return EventHandler.off(htmlElement, EVENT_KEY$7);\n      });\n      /**\r\n       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`\r\n       * Do not move `document` in `htmlElements` array\r\n       * It will remove `EVENT_CLICK_DATA_API` event that should remain\r\n       */\n\n      EventHandler.off(document, EVENT_FOCUSIN);\n      Data.removeData(this._element, DATA_KEY$7);\n      this._config = null;\n      this._element = null;\n      this._dialog = null;\n      this._backdrop = null;\n      this._isShown = null;\n      this._isBodyOverflowing = null;\n      this._ignoreBackdropClick = null;\n      this._isTransitioning = null;\n      this._scrollbarWidth = null;\n    };\n\n    _proto.handleUpdate = function handleUpdate() {\n      this._adjustDialog();\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$5), config);\n      typeCheckConfig(NAME$7, config, DefaultType$4);\n      return config;\n    };\n\n    _proto._showElement = function _showElement(relatedTarget) {\n      var _this3 = this;\n\n      var transition = this._element.classList.contains(CLASS_NAME_FADE);\n\n      var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n        // Don't move modal's DOM position\n        document.body.appendChild(this._element);\n      }\n\n      this._element.style.display = 'block';\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      this._element.scrollTop = 0;\n\n      if (modalBody) {\n        modalBody.scrollTop = 0;\n      }\n\n      if (transition) {\n        reflow(this._element);\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW$3);\n\n      if (this._config.focus) {\n        this._enforceFocus();\n      }\n\n      var transitionComplete = function transitionComplete() {\n        if (_this3._config.focus) {\n          _this3._element.focus();\n        }\n\n        _this3._isTransitioning = false;\n        EventHandler.trigger(_this3._element, EVENT_SHOWN$2, {\n          relatedTarget: relatedTarget\n        });\n      };\n\n      if (transition) {\n        var transitionDuration = getTransitionDurationFromElement(this._dialog);\n        EventHandler.one(this._dialog, TRANSITION_END, transitionComplete);\n        emulateTransitionEnd(this._dialog, transitionDuration);\n      } else {\n        transitionComplete();\n      }\n    };\n\n    _proto._enforceFocus = function _enforceFocus() {\n      var _this4 = this;\n\n      EventHandler.off(document, EVENT_FOCUSIN); // guard against infinite focus loop\n\n      EventHandler.on(document, EVENT_FOCUSIN, function (event) {\n        if (document !== event.target && _this4._element !== event.target && !_this4._element.contains(event.target)) {\n          _this4._element.focus();\n        }\n      });\n    };\n\n    _proto._setEscapeEvent = function _setEscapeEvent() {\n      var _this5 = this;\n\n      if (this._isShown) {\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {\n          if (_this5._config.keyboard && event.key === ESCAPE_KEY$1) {\n            event.preventDefault();\n\n            _this5.hide();\n          } else if (!_this5._config.keyboard && event.key === ESCAPE_KEY$1) {\n            _this5._triggerBackdropTransition();\n          }\n        });\n      } else {\n        EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS);\n      }\n    };\n\n    _proto._setResizeEvent = function _setResizeEvent() {\n      var _this6 = this;\n\n      if (this._isShown) {\n        EventHandler.on(window, EVENT_RESIZE, function () {\n          return _this6._adjustDialog();\n        });\n      } else {\n        EventHandler.off(window, EVENT_RESIZE);\n      }\n    };\n\n    _proto._hideModal = function _hideModal() {\n      var _this7 = this;\n\n      this._element.style.display = 'none';\n\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._isTransitioning = false;\n\n      this._showBackdrop(function () {\n        document.body.classList.remove(CLASS_NAME_OPEN);\n\n        _this7._resetAdjustments();\n\n        _this7._resetScrollbar();\n\n        EventHandler.trigger(_this7._element, EVENT_HIDDEN$2);\n      });\n    };\n\n    _proto._removeBackdrop = function _removeBackdrop() {\n      this._backdrop.parentNode.removeChild(this._backdrop);\n\n      this._backdrop = null;\n    };\n\n    _proto._showBackdrop = function _showBackdrop(callback) {\n      var _this8 = this;\n\n      var animate = this._element.classList.contains(CLASS_NAME_FADE) ? CLASS_NAME_FADE : '';\n\n      if (this._isShown && this._config.backdrop) {\n        this._backdrop = document.createElement('div');\n        this._backdrop.className = CLASS_NAME_BACKDROP;\n\n        if (animate) {\n          this._backdrop.classList.add(animate);\n        }\n\n        document.body.appendChild(this._backdrop);\n        EventHandler.on(this._element, EVENT_CLICK_DISMISS, function (event) {\n          if (_this8._ignoreBackdropClick) {\n            _this8._ignoreBackdropClick = false;\n            return;\n          }\n\n          if (event.target !== event.currentTarget) {\n            return;\n          }\n\n          _this8._triggerBackdropTransition();\n        });\n\n        if (animate) {\n          reflow(this._backdrop);\n        }\n\n        this._backdrop.classList.add(CLASS_NAME_SHOW$3);\n\n        if (!animate) {\n          callback();\n          return;\n        }\n\n        var backdropTransitionDuration = getTransitionDurationFromElement(this._backdrop);\n        EventHandler.one(this._backdrop, TRANSITION_END, callback);\n        emulateTransitionEnd(this._backdrop, backdropTransitionDuration);\n      } else if (!this._isShown && this._backdrop) {\n        this._backdrop.classList.remove(CLASS_NAME_SHOW$3);\n\n        var callbackRemove = function callbackRemove() {\n          _this8._removeBackdrop();\n\n          callback();\n        };\n\n        if (this._element.classList.contains(CLASS_NAME_FADE)) {\n          var _backdropTransitionDuration = getTransitionDurationFromElement(this._backdrop);\n\n          EventHandler.one(this._backdrop, TRANSITION_END, callbackRemove);\n          emulateTransitionEnd(this._backdrop, _backdropTransitionDuration);\n        } else {\n          callbackRemove();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {\n      var _this9 = this;\n\n      if (this._config.backdrop === 'static') {\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n        if (!isModalOverflowing) {\n          this._element.style.overflowY = 'hidden';\n        }\n\n        this._element.classList.add(CLASS_NAME_STATIC);\n\n        var modalTransitionDuration = getTransitionDurationFromElement(this._dialog);\n        EventHandler.off(this._element, TRANSITION_END);\n        EventHandler.one(this._element, TRANSITION_END, function () {\n          _this9._element.classList.remove(CLASS_NAME_STATIC);\n\n          if (!isModalOverflowing) {\n            EventHandler.one(_this9._element, TRANSITION_END, function () {\n              _this9._element.style.overflowY = '';\n            });\n            emulateTransitionEnd(_this9._element, modalTransitionDuration);\n          }\n        });\n        emulateTransitionEnd(this._element, modalTransitionDuration);\n\n        this._element.focus();\n      } else {\n        this.hide();\n      }\n    } // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n    ;\n\n    _proto._adjustDialog = function _adjustDialog() {\n      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      if (!this._isBodyOverflowing && isModalOverflowing) {\n        this._element.style.paddingLeft = this._scrollbarWidth + \"px\";\n      }\n\n      if (this._isBodyOverflowing && !isModalOverflowing) {\n        this._element.style.paddingRight = this._scrollbarWidth + \"px\";\n      }\n    };\n\n    _proto._resetAdjustments = function _resetAdjustments() {\n      this._element.style.paddingLeft = '';\n      this._element.style.paddingRight = '';\n    };\n\n    _proto._checkScrollbar = function _checkScrollbar() {\n      var rect = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;\n      this._scrollbarWidth = this._getScrollbarWidth();\n    };\n\n    _proto._setScrollbar = function _setScrollbar() {\n      var _this10 = this;\n\n      if (this._isBodyOverflowing) {\n        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\n        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n        // Adjust fixed content padding\n        SelectorEngine.find(SELECTOR_FIXED_CONTENT).forEach(function (element) {\n          var actualPadding = element.style.paddingRight;\n          var calculatedPadding = window.getComputedStyle(element)['padding-right'];\n          Manipulator.setDataAttribute(element, 'padding-right', actualPadding);\n          element.style.paddingRight = parseFloat(calculatedPadding) + _this10._scrollbarWidth + \"px\";\n        }); // Adjust sticky content margin\n\n        SelectorEngine.find(SELECTOR_STICKY_CONTENT).forEach(function (element) {\n          var actualMargin = element.style.marginRight;\n          var calculatedMargin = window.getComputedStyle(element)['margin-right'];\n          Manipulator.setDataAttribute(element, 'margin-right', actualMargin);\n          element.style.marginRight = parseFloat(calculatedMargin) - _this10._scrollbarWidth + \"px\";\n        }); // Adjust body padding\n\n        var actualPadding = document.body.style.paddingRight;\n        var calculatedPadding = window.getComputedStyle(document.body)['padding-right'];\n        Manipulator.setDataAttribute(document.body, 'padding-right', actualPadding);\n        document.body.style.paddingRight = parseFloat(calculatedPadding) + this._scrollbarWidth + \"px\";\n      }\n\n      document.body.classList.add(CLASS_NAME_OPEN);\n    };\n\n    _proto._resetScrollbar = function _resetScrollbar() {\n      // Restore fixed content padding\n      SelectorEngine.find(SELECTOR_FIXED_CONTENT).forEach(function (element) {\n        var padding = Manipulator.getDataAttribute(element, 'padding-right');\n\n        if (typeof padding !== 'undefined') {\n          Manipulator.removeDataAttribute(element, 'padding-right');\n          element.style.paddingRight = padding;\n        }\n      }); // Restore sticky content and navbar-toggler margin\n\n      SelectorEngine.find(\"\" + SELECTOR_STICKY_CONTENT).forEach(function (element) {\n        var margin = Manipulator.getDataAttribute(element, 'margin-right');\n\n        if (typeof margin !== 'undefined') {\n          Manipulator.removeDataAttribute(element, 'margin-right');\n          element.style.marginRight = margin;\n        }\n      }); // Restore body padding\n\n      var padding = Manipulator.getDataAttribute(document.body, 'padding-right');\n\n      if (typeof padding === 'undefined') {\n        document.body.style.paddingRight = '';\n      } else {\n        Manipulator.removeDataAttribute(document.body, 'padding-right');\n        document.body.style.paddingRight = padding;\n      }\n    };\n\n    _proto._getScrollbarWidth = function _getScrollbarWidth() {\n      // thx d.walsh\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;\n      document.body.appendChild(scrollDiv);\n      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return scrollbarWidth;\n    } // Static\n    ;\n\n    Modal.jQueryInterface = function jQueryInterface(config, relatedTarget) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$7);\n\n        var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$5), Manipulator.getDataAttributes(this)), _typeof(config) === 'object' && config ? config : {});\n\n        if (!data) {\n          data = new Modal(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](relatedTarget);\n        } else if (_config.show) {\n          data.show(relatedTarget);\n        }\n      });\n    };\n\n    Modal.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$7);\n    };\n\n    _createClass(Modal, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$7;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$5;\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$7, SELECTOR_DATA_TOGGLE$3, function (event) {\n    var _this11 = this;\n\n    var target = getElementFromSelector(this);\n\n    if (this.tagName === 'A' || this.tagName === 'AREA') {\n      event.preventDefault();\n    }\n\n    EventHandler.one(target, EVENT_SHOW$2, function (showEvent) {\n      if (showEvent.defaultPrevented) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      EventHandler.one(target, EVENT_HIDDEN$2, function () {\n        if (isVisible(_this11)) {\n          _this11.focus();\n        }\n      });\n    });\n    var data = Data.getData(target, DATA_KEY$7);\n\n    if (!data) {\n      var config = _objectSpread2(_objectSpread2({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));\n\n      data = new Modal(target, config);\n    }\n\n    data.show(this);\n  });\n  var $$8 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .modal to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$8) {\n    var JQUERY_NO_CONFLICT$7 = $$8.fn[NAME$7];\n    $$8.fn[NAME$7] = Modal.jQueryInterface;\n    $$8.fn[NAME$7].Constructor = Modal;\n\n    $$8.fn[NAME$7].noConflict = function () {\n      $$8.fn[NAME$7] = JQUERY_NO_CONFLICT$7;\n      return Modal.jQueryInterface;\n    };\n  }\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * Bootstrap (v5.0.0-alpha1): util/sanitizer.js\r\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\r\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\r\n   *\r\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\r\n   */\n\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;\n  /**\r\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\r\n   *\r\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\r\n   */\n\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  var allowedAttribute = function allowedAttribute(attr, allowedAttributeList) {\n    var attrName = attr.nodeName.toLowerCase();\n\n    if (allowedAttributeList.indexOf(attrName) !== -1) {\n      if (uriAttrs.indexOf(attrName) !== -1) {\n        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));\n      }\n\n      return true;\n    }\n\n    var regExp = allowedAttributeList.filter(function (attrRegex) {\n      return attrRegex instanceof RegExp;\n    }); // Check if a regular expression validates the attribute.\n\n    for (var i = 0, len = regExp.length; i < len; i++) {\n      if (attrName.match(regExp[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var DefaultWhitelist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n\n  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {\n    var _ref;\n\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml);\n    }\n\n    var domParser = new window.DOMParser();\n    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    var whitelistKeys = Object.keys(whiteList);\n\n    var elements = (_ref = []).concat.apply(_ref, createdDocument.body.querySelectorAll('*'));\n\n    var _loop = function _loop(i, len) {\n      var _ref2;\n\n      var el = elements[i];\n      var elName = el.nodeName.toLowerCase();\n\n      if (whitelistKeys.indexOf(elName) === -1) {\n        el.parentNode.removeChild(el);\n        return \"continue\";\n      }\n\n      var attributeList = (_ref2 = []).concat.apply(_ref2, el.attributes);\n\n      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);\n      attributeList.forEach(function (attr) {\n        if (!allowedAttribute(attr, whitelistedAttributes)) {\n          el.removeAttribute(attr.nodeName);\n        }\n      });\n    };\n\n    for (var i = 0, len = elements.length; i < len; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$8 = 'tooltip';\n  var VERSION$8 = '3.2.2';\n  var DATA_KEY$8 = 'coreui.tooltip';\n  var EVENT_KEY$8 = \".\" + DATA_KEY$8;\n  var CLASS_PREFIX = 'bs-tooltip';\n  var BSCLS_PREFIX_REGEX = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX + \"\\\\S+\", 'g');\n  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];\n  var DefaultType$5 = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(array|function)',\n    container: '(string|element|boolean)',\n    boundary: '(string|element)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    whiteList: 'object',\n    popperConfig: '(null|object)'\n  };\n  var AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: 'right',\n    BOTTOM: 'bottom',\n    LEFT: 'left'\n  };\n  var Default$6 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: [0, 0],\n    container: false,\n    boundary: 'scrollParent',\n    sanitize: true,\n    sanitizeFn: null,\n    whiteList: DefaultWhitelist,\n    popperConfig: null\n  };\n  var Event$1 = {\n    HIDE: \"hide\" + EVENT_KEY$8,\n    HIDDEN: \"hidden\" + EVENT_KEY$8,\n    SHOW: \"show\" + EVENT_KEY$8,\n    SHOWN: \"shown\" + EVENT_KEY$8,\n    INSERTED: \"inserted\" + EVENT_KEY$8,\n    CLICK: \"click\" + EVENT_KEY$8,\n    FOCUSIN: \"focusin\" + EVENT_KEY$8,\n    FOCUSOUT: \"focusout\" + EVENT_KEY$8,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY$8,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY$8\n  };\n  var CLASS_NAME_FADE$1 = 'fade';\n  var CLASS_NAME_MODAL = 'modal';\n  var CLASS_NAME_SHOW$4 = 'show';\n  var HOVER_STATE_SHOW = 'show';\n  var HOVER_STATE_OUT = 'out';\n  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  var TRIGGER_HOVER = 'hover';\n  var TRIGGER_FOCUS = 'focus';\n  var TRIGGER_CLICK = 'click';\n  var TRIGGER_MANUAL = 'manual';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Tooltip = /*#__PURE__*/function () {\n    function Tooltip(element, config) {\n      if (typeof createPopper === 'undefined') {\n        throw new TypeError('CoreUI\\'s tooltips require Popper.js (https://popper.js.org)');\n      } // private\n\n\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._popper = null; // Protected\n\n      this.element = element;\n      this.config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n\n      Data.setData(element, this.constructor.DATA_KEY, this);\n    } // Getters\n\n\n    var _proto = Tooltip.prototype; // Public\n\n    _proto.enable = function enable() {\n      this._isEnabled = true;\n    };\n\n    _proto.disable = function disable() {\n      this._isEnabled = false;\n    };\n\n    _proto.toggleEnabled = function toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    };\n\n    _proto.toggle = function toggle(event) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (event) {\n        var dataKey = this.constructor.DATA_KEY;\n        var context = Data.getData(event.delegateTarget, dataKey);\n\n        if (!context) {\n          context = new this.constructor(event.delegateTarget, this._getDelegateConfig());\n          Data.setData(event.delegateTarget, dataKey, context);\n        }\n\n        context._activeTrigger.click = !context._activeTrigger.click;\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context);\n        } else {\n          context._leave(null, context);\n        }\n      } else {\n        if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$4)) {\n          this._leave(null, this);\n\n          return;\n        }\n\n        this._enter(null, this);\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      clearTimeout(this._timeout);\n      Data.removeData(this.element, this.constructor.DATA_KEY);\n      EventHandler.off(this.element, this.constructor.EVENT_KEY);\n      EventHandler.off(this.element.closest(\".\" + CLASS_NAME_MODAL), 'hide.coreui.modal', this._hideModalHandler);\n\n      if (this.tip) {\n        this.tip.parentNode.removeChild(this.tip);\n      }\n\n      this._isEnabled = null;\n      this._timeout = null;\n      this._hoverState = null;\n      this._activeTrigger = null;\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      this._popper = null;\n      this.element = null;\n      this.config = null;\n      this.tip = null;\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this.element.style.display === 'none') {\n        throw new Error('Please use show on visible elements');\n      }\n\n      if (this.isWithContent() && this._isEnabled) {\n        var showEvent = EventHandler.trigger(this.element, this.constructor.Event.SHOW);\n        var shadowRoot = findShadowRoot(this.element);\n        var isInTheDom = shadowRoot === null ? this.element.ownerDocument.documentElement.contains(this.element) : shadowRoot.contains(this.element);\n\n        if (showEvent.defaultPrevented || !isInTheDom) {\n          return;\n        }\n\n        var tip = this.getTipElement();\n        var tipId = getUID(this.constructor.NAME);\n        tip.setAttribute('id', tipId);\n        this.element.setAttribute('aria-describedby', tipId);\n        this.setContent();\n\n        if (this.config.animation) {\n          tip.classList.add(CLASS_NAME_FADE$1);\n        }\n\n        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\n\n        var attachment = this._getAttachment(placement); // this._addAttachmentClass(attachment)\n\n\n        var container = this._getContainer();\n\n        Data.setData(tip, this.constructor.DATA_KEY, this);\n\n        if (!this.element.ownerDocument.documentElement.contains(this.tip)) {\n          container.appendChild(tip);\n        }\n\n        EventHandler.trigger(this.element, this.constructor.Event.INSERTED);\n        this._popper = createPopper(this.element, tip, this._getPopperConfig(attachment));\n        tip.classList.add(CLASS_NAME_SHOW$4); // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref;\n\n          (_ref = []).concat.apply(_ref, document.body.children).forEach(function (element) {\n            EventHandler.on(element, 'mouseover', noop());\n          });\n        }\n\n        var complete = function complete() {\n          if (_this.config.animation) {\n            _this._fixTransition();\n          }\n\n          var prevHoverState = _this._hoverState;\n          _this._hoverState = null;\n          EventHandler.trigger(_this.element, _this.constructor.Event.SHOWN);\n\n          if (prevHoverState === HOVER_STATE_OUT) {\n            _this._leave(null, _this);\n          }\n        };\n\n        if (this.tip.classList.contains(CLASS_NAME_FADE$1)) {\n          var transitionDuration = getTransitionDurationFromElement(this.tip);\n          EventHandler.one(this.tip, TRANSITION_END, complete);\n          emulateTransitionEnd(this.tip, transitionDuration);\n        } else {\n          complete();\n        }\n      }\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      var tip = this.getTipElement();\n\n      var complete = function complete() {\n        if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {\n          tip.parentNode.removeChild(tip);\n        }\n\n        _this2._cleanTipClass();\n\n        _this2.element.removeAttribute('aria-describedby');\n\n        EventHandler.trigger(_this2.element, _this2.constructor.Event.HIDDEN);\n\n        _this2._popper.destroy();\n      };\n\n      var hideEvent = EventHandler.trigger(this.element, this.constructor.Event.HIDE);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      tip.classList.remove(CLASS_NAME_SHOW$4); // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n      if ('ontouchstart' in document.documentElement) {\n        var _ref2;\n\n        (_ref2 = []).concat.apply(_ref2, document.body.children).forEach(function (element) {\n          return EventHandler.off(element, 'mouseover', noop);\n        });\n      }\n\n      this._activeTrigger[TRIGGER_CLICK] = false;\n      this._activeTrigger[TRIGGER_FOCUS] = false;\n      this._activeTrigger[TRIGGER_HOVER] = false;\n\n      if (this.tip.classList.contains(CLASS_NAME_FADE$1)) {\n        var transitionDuration = getTransitionDurationFromElement(tip);\n        EventHandler.one(tip, TRANSITION_END, complete);\n        emulateTransitionEnd(tip, transitionDuration);\n      } else {\n        complete();\n      }\n\n      this._hoverState = '';\n    };\n\n    _proto.update = function update() {\n      if (this._popper !== null) {\n        this._popper.update();\n      }\n    } // Protected\n    ;\n\n    _proto.isWithContent = function isWithContent() {\n      return Boolean(this.getTitle());\n    };\n\n    _proto.getTipElement = function getTipElement() {\n      if (this.tip) {\n        return this.tip;\n      }\n\n      var element = document.createElement('div');\n      element.innerHTML = this.config.template;\n      this.tip = element.children[0];\n      return this.tip;\n    };\n\n    _proto.setContent = function setContent() {\n      var tip = this.getTipElement();\n      this.setElementContent(SelectorEngine.findOne(SELECTOR_TOOLTIP_INNER, tip), this.getTitle());\n      tip.classList.remove(CLASS_NAME_FADE$1, CLASS_NAME_SHOW$4);\n    };\n\n    _proto.setElementContent = function setElementContent(element, content) {\n      if (element === null) {\n        return;\n      }\n\n      if (_typeof(content) === 'object' && isElement(content)) {\n        if (content.jquery) {\n          content = content[0];\n        } // content is a DOM node or a jQuery\n\n\n        if (this.config.html) {\n          if (content.parentNode !== element) {\n            element.innerHTML = '';\n            element.appendChild(content);\n          }\n        } else {\n          element.textContent = content.textContent;\n        }\n\n        return;\n      }\n\n      if (this.config.html) {\n        if (this.config.sanitize) {\n          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);\n        }\n\n        element.innerHTML = content;\n      } else {\n        element.textContent = content;\n      }\n    };\n\n    _proto.getTitle = function getTitle() {\n      var title = this.element.getAttribute('data-original-title');\n\n      if (!title) {\n        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\n      }\n\n      return title;\n    } // Private\n    ;\n\n    _proto._getPopperConfig = function _getPopperConfig(attachment) {\n      var _this3 = this;\n\n      var defaultBsConfig = {\n        placement: attachment,\n        modifiers: [{\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        }, {\n          name: 'arrow',\n          options: {\n            element: \".\" + this.constructor.NAME + \"-arrow\"\n          }\n        }, {\n          name: 'preventOverflow',\n          options: {\n            boundary: this.config.boundary\n          }\n        }],\n        onFirstUpdate: function onFirstUpdate(data) {\n          if (data.originalPlacement !== data.placement) {\n            // this._handlePopperPlacementChange(data)\n            // fix Popper position issue\n            //TODO: find where is the problem or find better solution\n            _this3._popper.update();\n          }\n        }\n      };\n      return _objectSpread2(_objectSpread2({}, defaultBsConfig), this.config.popperConfig);\n    } // _addAttachmentClass(attachment) {\n    //   this.getTipElement().classList.add(`${CLASS_PREFIX}-${attachment}`)\n    // }\n    // _getOffset() {\n    //   const offset = {}\n    //   if (typeof this.config.offset === 'function') {\n    //     offset.fn = data => {\n    //       data.offsets = {\n    //         ...data.offsets,\n    //         ...this.config.offset(data.offsets, this.element) || {}\n    //       }\n    //       return data\n    //     }\n    //   } else {\n    //     offset.offset = this.config.offset\n    //   }\n    //   return offset\n    // }\n    ;\n\n    _proto._getOffset = function _getOffset() {\n      var _this4 = this;\n\n      var offset = [];\n\n      if (typeof this.config.offset === 'function') {\n        offset = function offset(_ref3) {\n          var placement = _ref3.placement,\n              reference = _ref3.reference,\n              popper = _ref3.popper;\n          return _this4.config.offset({\n            placement: placement,\n            reference: reference,\n            popper: popper\n          });\n        };\n      } else {\n        offset = this.config.offset;\n      }\n\n      return offset;\n    };\n\n    _proto._getContainer = function _getContainer() {\n      if (this.config.container === false) {\n        return document.body;\n      }\n\n      if (isElement(this.config.container)) {\n        return this.config.container;\n      }\n\n      return SelectorEngine.findOne(this.config.container);\n    };\n\n    _proto._getAttachment = function _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this5 = this;\n\n      var triggers = this.config.trigger.split(' ');\n      triggers.forEach(function (trigger) {\n        if (trigger === 'click') {\n          EventHandler.on(_this5.element, _this5.constructor.Event.CLICK, _this5.config.selector, function (event) {\n            return _this5.toggle(event);\n          });\n        } else if (trigger !== TRIGGER_MANUAL) {\n          var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;\n          var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;\n          EventHandler.on(_this5.element, eventIn, _this5.config.selector, function (event) {\n            return _this5._enter(event);\n          });\n          EventHandler.on(_this5.element, eventOut, _this5.config.selector, function (event) {\n            return _this5._leave(event);\n          });\n        }\n      });\n\n      this._hideModalHandler = function () {\n        if (_this5.element) {\n          _this5.hide();\n        }\n      };\n\n      EventHandler.on(this.element.closest(\".\" + CLASS_NAME_MODAL), 'hide.coreui.modal', this._hideModalHandler);\n\n      if (this.config.selector) {\n        this.config = _objectSpread2(_objectSpread2({}, this.config), {}, {\n          trigger: 'manual',\n          selector: ''\n        });\n      } else {\n        this._fixTitle();\n      }\n    };\n\n    _proto._fixTitle = function _fixTitle() {\n      var titleType = _typeof(this.element.getAttribute('data-original-title'));\n\n      if (this.element.getAttribute('title') || titleType !== 'string') {\n        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\n        this.element.setAttribute('title', '');\n      }\n    };\n\n    _proto._enter = function _enter(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || Data.getData(event.delegateTarget, dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.delegateTarget, this._getDelegateConfig());\n        Data.setData(event.delegateTarget, dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n      }\n\n      if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$4) || context._hoverState === HOVER_STATE_SHOW) {\n        context._hoverState = HOVER_STATE_SHOW;\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_SHOW;\n\n      if (!context.config.delay || !context.config.delay.show) {\n        context.show();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HOVER_STATE_SHOW) {\n          context.show();\n        }\n      }, context.config.delay.show);\n    };\n\n    _proto._leave = function _leave(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || Data.getData(event.delegateTarget, dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.delegateTarget, this._getDelegateConfig());\n        Data.setData(event.delegateTarget, dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_OUT;\n\n      if (!context.config.delay || !context.config.delay.hide) {\n        context.hide();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HOVER_STATE_OUT) {\n          context.hide();\n        }\n      }, context.config.delay.hide);\n    };\n\n    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {\n      for (var trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      var dataAttributes = Manipulator.getDataAttributes(this.element);\n      Object.keys(dataAttributes).forEach(function (dataAttr) {\n        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {\n          delete dataAttributes[dataAttr];\n        }\n      });\n\n      if (config && _typeof(config.container) === 'object' && config.container.jquery) {\n        config.container = config.container[0];\n      }\n\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), dataAttributes), _typeof(config) === 'object' && config ? config : {});\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString();\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString();\n      }\n\n      typeCheckConfig(NAME$8, config, this.constructor.DefaultType);\n\n      if (config.sanitize) {\n        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);\n      }\n\n      return config;\n    };\n\n    _proto._getDelegateConfig = function _getDelegateConfig() {\n      var config = {};\n\n      if (this.config) {\n        for (var key in this.config) {\n          if (this.constructor.Default[key] !== this.config[key]) {\n            config[key] = this.config[key];\n          }\n        }\n      }\n\n      return config;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var tip = this.getTipElement();\n      var tabClass = tip.getAttribute('class').match(BSCLS_PREFIX_REGEX);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.map(function (token) {\n          return token.trim();\n        }).forEach(function (tClass) {\n          return tip.classList.remove(tClass);\n        });\n      }\n    } // _handlePopperPlacementChange(popperData) {\n    //   console.log(popperData)\n    //   const popperInstance = popperData.elements.popper\n    //   this.tip = document.getElementById(popperInstance.getAttribute('id'))\n    //   console.log(this.tip)\n    //   this._cleanTipClass()\n    //   this._addAttachmentClass(this._getAttachment(popperData.placement))\n    // }\n    ;\n\n    _proto._fixTransition = function _fixTransition() {\n      var tip = this.getTipElement();\n      var initConfigAnimation = this.config.animation;\n\n      if (tip.getAttribute('data-popper-placement') !== null) {\n        return;\n      }\n\n      tip.classList.remove(CLASS_NAME_FADE$1);\n      this.config.animation = false;\n      this.hide();\n      this.show();\n      this.config.animation = initConfigAnimation;\n    } // Static\n    ;\n\n    Tooltip.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$8);\n\n        var _config = _typeof(config) === 'object' && config;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Tooltip(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Tooltip.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$8);\n    };\n\n    _createClass(Tooltip, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$8;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$6;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$8;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY$8;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$1;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY$8;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$5;\n      }\n    }]);\n\n    return Tooltip;\n  }();\n\n  var $$9 = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .tooltip to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$9) {\n    var JQUERY_NO_CONFLICT$8 = $$9.fn[NAME$8];\n    $$9.fn[NAME$8] = Tooltip.jQueryInterface;\n    $$9.fn[NAME$8].Constructor = Tooltip;\n\n    $$9.fn[NAME$8].noConflict = function () {\n      $$9.fn[NAME$8] = JQUERY_NO_CONFLICT$8;\n      return Tooltip.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$9 = 'popover';\n  var VERSION$9 = '3.2.2';\n  var DATA_KEY$9 = 'coreui.popover';\n  var EVENT_KEY$9 = \".\" + DATA_KEY$9;\n  var CLASS_PREFIX$1 = 'bs-popover';\n  var BSCLS_PREFIX_REGEX$1 = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX$1 + \"\\\\S+\", 'g');\n\n  var Default$7 = _objectSpread2(_objectSpread2({}, Tooltip.Default), {}, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n  });\n\n  var DefaultType$6 = _objectSpread2(_objectSpread2({}, Tooltip.DefaultType), {}, {\n    content: '(string|element|function)'\n  });\n\n  var Event$2 = {\n    HIDE: \"hide\" + EVENT_KEY$9,\n    HIDDEN: \"hidden\" + EVENT_KEY$9,\n    SHOW: \"show\" + EVENT_KEY$9,\n    SHOWN: \"shown\" + EVENT_KEY$9,\n    INSERTED: \"inserted\" + EVENT_KEY$9,\n    CLICK: \"click\" + EVENT_KEY$9,\n    FOCUSIN: \"focusin\" + EVENT_KEY$9,\n    FOCUSOUT: \"focusout\" + EVENT_KEY$9,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY$9,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY$9\n  };\n  var CLASS_NAME_FADE$2 = 'fade';\n  var CLASS_NAME_SHOW$5 = 'show';\n  var SELECTOR_TITLE = '.popover-header';\n  var SELECTOR_CONTENT = '.popover-body';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Popover = /*#__PURE__*/function (_Tooltip) {\n    _inheritsLoose(Popover, _Tooltip);\n\n    function Popover() {\n      return _Tooltip.apply(this, arguments) || this;\n    }\n\n    var _proto = Popover.prototype; // Overrides\n\n    _proto.isWithContent = function isWithContent() {\n      return this.getTitle() || this._getContent();\n    };\n\n    _proto.setContent = function setContent() {\n      var tip = this.getTipElement(); // we use append for html objects to maintain js events\n\n      this.setElementContent(SelectorEngine.findOne(SELECTOR_TITLE, tip), this.getTitle());\n\n      var content = this._getContent();\n\n      if (typeof content === 'function') {\n        content = content.call(this.element);\n      }\n\n      this.setElementContent(SelectorEngine.findOne(SELECTOR_CONTENT, tip), content);\n      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$5);\n    } // Private\n    ;\n\n    _proto._addAttachmentClass = function _addAttachmentClass(attachment) {\n      this.getTipElement().classList.add(CLASS_PREFIX$1 + \"-\" + attachment);\n    };\n\n    _proto._getContent = function _getContent() {\n      return this.element.getAttribute('data-content') || this.config.content;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var tip = this.getTipElement();\n      var tabClass = tip.getAttribute('class').match(BSCLS_PREFIX_REGEX$1);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.map(function (token) {\n          return token.trim();\n        }).forEach(function (tClass) {\n          return tip.classList.remove(tClass);\n        });\n      }\n    } // Static\n    ;\n\n    Popover.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$9);\n\n        var _config = _typeof(config) === 'object' ? config : null;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Popover(this, _config);\n          Data.setData(this, DATA_KEY$9, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Popover.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$9);\n    };\n\n    _createClass(Popover, null, [{\n      key: \"VERSION\",\n      // Getters\n      get: function get() {\n        return VERSION$9;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$7;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$9;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY$9;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$2;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY$9;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$6;\n      }\n    }]);\n\n    return Popover;\n  }(Tooltip);\n\n  var $$a = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$a) {\n    var JQUERY_NO_CONFLICT$9 = $$a.fn[NAME$9];\n    $$a.fn[NAME$9] = Popover.jQueryInterface;\n    $$a.fn[NAME$9].Constructor = Popover;\n\n    $$a.fn[NAME$9].noConflict = function () {\n      $$a.fn[NAME$9] = JQUERY_NO_CONFLICT$9;\n      return Popover.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$a = 'scrollspy';\n  var VERSION$a = '3.2.2';\n  var DATA_KEY$a = 'coreui.scrollspy';\n  var EVENT_KEY$a = \".\" + DATA_KEY$a;\n  var DATA_API_KEY$8 = '.data-api';\n  var Default$8 = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n  var DefaultType$7 = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n  var EVENT_ACTIVATE = \"activate\" + EVENT_KEY$a;\n  var EVENT_SCROLL = \"scroll\" + EVENT_KEY$a;\n  var EVENT_LOAD_DATA_API$1 = \"load\" + EVENT_KEY$a + DATA_API_KEY$8;\n  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  var CLASS_NAME_ACTIVE$3 = 'active';\n  var SELECTOR_DATA_SPY = '[data-spy=\"scroll\"]';\n  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  var SELECTOR_NAV_LINKS = '.nav-link';\n  var SELECTOR_NAV_ITEMS = '.nav-item';\n  var SELECTOR_LIST_ITEMS = '.list-group-item';\n  var SELECTOR_DROPDOWN = '.dropdown';\n  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  var METHOD_OFFSET = 'offset';\n  var METHOD_POSITION = 'position';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var ScrollSpy = /*#__PURE__*/function () {\n    function ScrollSpy(element, config) {\n      var _this = this;\n\n      this._element = element;\n      this._scrollElement = element.tagName === 'BODY' ? window : element;\n      this._config = this._getConfig(config);\n      this._selector = this._config.target + \" \" + SELECTOR_NAV_LINKS + \", \" + this._config.target + \" \" + SELECTOR_LIST_ITEMS + \", \" + this._config.target + \" .\" + CLASS_NAME_DROPDOWN_ITEM;\n      this._offsets = [];\n      this._targets = [];\n      this._activeTarget = null;\n      this._scrollHeight = 0;\n      EventHandler.on(this._scrollElement, EVENT_SCROLL, function (event) {\n        return _this._process(event);\n      });\n      this.refresh();\n\n      this._process();\n\n      Data.setData(element, DATA_KEY$a, this);\n    } // Getters\n\n\n    var _proto = ScrollSpy.prototype; // Public\n\n    _proto.refresh = function refresh() {\n      var _this2 = this;\n\n      var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n      var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n      this._offsets = [];\n      this._targets = [];\n      this._scrollHeight = this._getScrollHeight();\n      var targets = SelectorEngine.find(this._selector);\n      targets.map(function (element) {\n        var targetSelector = getSelectorFromElement(element);\n        var target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;\n\n        if (target) {\n          var targetBCR = target.getBoundingClientRect();\n\n          if (targetBCR.width || targetBCR.height) {\n            return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n          }\n        }\n\n        return null;\n      }).filter(function (item) {\n        return item;\n      }).sort(function (a, b) {\n        return a[0] - b[0];\n      }).forEach(function (item) {\n        _this2._offsets.push(item[0]);\n\n        _this2._targets.push(item[1]);\n      });\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$a);\n      EventHandler.off(this._scrollElement, EVENT_KEY$a);\n      this._element = null;\n      this._scrollElement = null;\n      this._config = null;\n      this._selector = null;\n      this._offsets = null;\n      this._targets = null;\n      this._activeTarget = null;\n      this._scrollHeight = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$8), _typeof(config) === 'object' && config ? config : {});\n\n      if (typeof config.target !== 'string' && isElement(config.target)) {\n        var id = config.target.id;\n\n        if (!id) {\n          id = getUID(NAME$a);\n          config.target.id = id;\n        }\n\n        config.target = \"#\" + id;\n      }\n\n      typeCheckConfig(NAME$a, config, DefaultType$7);\n      return config;\n    };\n\n    _proto._getScrollTop = function _getScrollTop() {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    };\n\n    _proto._getScrollHeight = function _getScrollHeight() {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    };\n\n    _proto._getOffsetHeight = function _getOffsetHeight() {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    };\n\n    _proto._process = function _process() {\n      var scrollTop = this._getScrollTop() + this._config.offset;\n\n      var scrollHeight = this._getScrollHeight();\n\n      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n      if (this._scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        var target = this._targets[this._targets.length - 1];\n\n        if (this._activeTarget !== target) {\n          this._activate(target);\n        }\n\n        return;\n      }\n\n      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n        this._activeTarget = null;\n\n        this._clear();\n\n        return;\n      }\n\n      for (var i = this._offsets.length; i--;) {\n        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this._activate(this._targets[i]);\n        }\n      }\n    };\n\n    _proto._activate = function _activate(target) {\n      this._activeTarget = target;\n\n      this._clear();\n\n      var queries = this._selector.split(',').map(function (selector) {\n        return selector + \"[data-target=\\\"\" + target + \"\\\"],\" + selector + \"[href=\\\"\" + target + \"\\\"]\";\n      });\n\n      var link = SelectorEngine.findOne(queries.join(','));\n\n      if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE, link.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$3);\n        link.classList.add(CLASS_NAME_ACTIVE$3);\n      } else {\n        // Set triggered link as active\n        link.classList.add(CLASS_NAME_ACTIVE$3);\n        SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP).forEach(function (listGroup) {\n          // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n          SelectorEngine.prev(listGroup, SELECTOR_NAV_LINKS + \", \" + SELECTOR_LIST_ITEMS).forEach(function (item) {\n            return item.classList.add(CLASS_NAME_ACTIVE$3);\n          }); // Handle special case when .nav-link is inside .nav-item\n\n          SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(function (navItem) {\n            SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(function (item) {\n              return item.classList.add(CLASS_NAME_ACTIVE$3);\n            });\n          });\n        });\n      }\n\n      EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {\n        relatedTarget: target\n      });\n    };\n\n    _proto._clear = function _clear() {\n      SelectorEngine.find(this._selector).filter(function (node) {\n        return node.classList.contains(CLASS_NAME_ACTIVE$3);\n      }).forEach(function (node) {\n        return node.classList.remove(CLASS_NAME_ACTIVE$3);\n      });\n    } // Static\n    ;\n\n    ScrollSpy.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$a);\n\n        var _config = _typeof(config) === 'object' && config;\n\n        if (!data) {\n          data = new ScrollSpy(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    ScrollSpy.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$a);\n    };\n\n    _createClass(ScrollSpy, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$a;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$8;\n      }\n    }]);\n\n    return ScrollSpy;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {\n    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(function (spy) {\n      return new ScrollSpy(spy, Manipulator.getDataAttributes(spy));\n    });\n  });\n  var $$b = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$b) {\n    var JQUERY_NO_CONFLICT$a = $$b.fn[NAME$a];\n    $$b.fn[NAME$a] = ScrollSpy.jQueryInterface;\n    $$b.fn[NAME$a].Constructor = ScrollSpy;\n\n    $$b.fn[NAME$a].noConflict = function () {\n      $$b.fn[NAME$a] = JQUERY_NO_CONFLICT$a;\n      return ScrollSpy.jQueryInterface;\n    };\n  }\n  /*!\r\n   * perfect-scrollbar v1.5.0\r\n   * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors\r\n   * Licensed under MIT\r\n   */\n\n\n  function get(element) {\n    return getComputedStyle(element);\n  }\n\n  function set(element, obj) {\n    for (var key in obj) {\n      var val = obj[key];\n\n      if (typeof val === 'number') {\n        val = val + \"px\";\n      }\n\n      element.style[key] = val;\n    }\n\n    return element;\n  }\n\n  function div(className) {\n    var div = document.createElement('div');\n    div.className = className;\n    return div;\n  }\n\n  var elMatches = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector);\n\n  function matches(element, query) {\n    if (!elMatches) {\n      throw new Error('No element matching method supported');\n    }\n\n    return elMatches.call(element, query);\n  }\n\n  function remove(element) {\n    if (element.remove) {\n      element.remove();\n    } else {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    }\n  }\n\n  function queryChildren(element, selector) {\n    return Array.prototype.filter.call(element.children, function (child) {\n      return matches(child, selector);\n    });\n  }\n\n  var cls = {\n    main: 'ps',\n    rtl: 'ps__rtl',\n    element: {\n      thumb: function thumb(x) {\n        return \"ps__thumb-\" + x;\n      },\n      rail: function rail(x) {\n        return \"ps__rail-\" + x;\n      },\n      consuming: 'ps__child--consume'\n    },\n    state: {\n      focus: 'ps--focus',\n      clicking: 'ps--clicking',\n      active: function active(x) {\n        return \"ps--active-\" + x;\n      },\n      scrolling: function scrolling(x) {\n        return \"ps--scrolling-\" + x;\n      }\n    }\n  };\n  /*\r\n   * Helper methods\r\n   */\n\n  var scrollingClassTimeout = {\n    x: null,\n    y: null\n  };\n\n  function addScrollingClass(i, x) {\n    var classList = i.element.classList;\n    var className = cls.state.scrolling(x);\n\n    if (classList.contains(className)) {\n      clearTimeout(scrollingClassTimeout[x]);\n    } else {\n      classList.add(className);\n    }\n  }\n\n  function removeScrollingClass(i, x) {\n    scrollingClassTimeout[x] = setTimeout(function () {\n      return i.isAlive && i.element.classList.remove(cls.state.scrolling(x));\n    }, i.settings.scrollingThreshold);\n  }\n\n  function setScrollingClassInstantly(i, x) {\n    addScrollingClass(i, x);\n    removeScrollingClass(i, x);\n  }\n\n  var EventElement = function EventElement(element) {\n    this.element = element;\n    this.handlers = {};\n  };\n\n  var prototypeAccessors = {\n    isEmpty: {\n      configurable: true\n    }\n  };\n\n  EventElement.prototype.bind = function bind(eventName, handler) {\n    if (typeof this.handlers[eventName] === 'undefined') {\n      this.handlers[eventName] = [];\n    }\n\n    this.handlers[eventName].push(handler);\n    this.element.addEventListener(eventName, handler, false);\n  };\n\n  EventElement.prototype.unbind = function unbind(eventName, target) {\n    var this$1 = this;\n    this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {\n      if (target && handler !== target) {\n        return true;\n      }\n\n      this$1.element.removeEventListener(eventName, handler, false);\n      return false;\n    });\n  };\n\n  EventElement.prototype.unbindAll = function unbindAll() {\n    for (var name in this.handlers) {\n      this.unbind(name);\n    }\n  };\n\n  prototypeAccessors.isEmpty.get = function () {\n    var this$1 = this;\n    return Object.keys(this.handlers).every(function (key) {\n      return this$1.handlers[key].length === 0;\n    });\n  };\n\n  Object.defineProperties(EventElement.prototype, prototypeAccessors);\n\n  var EventManager = function EventManager() {\n    this.eventElements = [];\n  };\n\n  EventManager.prototype.eventElement = function eventElement(element) {\n    var ee = this.eventElements.filter(function (ee) {\n      return ee.element === element;\n    })[0];\n\n    if (!ee) {\n      ee = new EventElement(element);\n      this.eventElements.push(ee);\n    }\n\n    return ee;\n  };\n\n  EventManager.prototype.bind = function bind(element, eventName, handler) {\n    this.eventElement(element).bind(eventName, handler);\n  };\n\n  EventManager.prototype.unbind = function unbind(element, eventName, handler) {\n    var ee = this.eventElement(element);\n    ee.unbind(eventName, handler);\n\n    if (ee.isEmpty) {\n      // remove\n      this.eventElements.splice(this.eventElements.indexOf(ee), 1);\n    }\n  };\n\n  EventManager.prototype.unbindAll = function unbindAll() {\n    this.eventElements.forEach(function (e) {\n      return e.unbindAll();\n    });\n    this.eventElements = [];\n  };\n\n  EventManager.prototype.once = function once(element, eventName, handler) {\n    var ee = this.eventElement(element);\n\n    var onceHandler = function onceHandler(evt) {\n      ee.unbind(eventName, onceHandler);\n      handler(evt);\n    };\n\n    ee.bind(eventName, onceHandler);\n  };\n\n  function createEvent(name) {\n    if (typeof window.CustomEvent === 'function') {\n      return new CustomEvent(name);\n    } else {\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(name, false, false, undefined);\n      return evt;\n    }\n  }\n\n  function processScrollDiff(i, axis, diff, useScrollingClass, forceFireReachEvent) {\n    if (useScrollingClass === void 0) useScrollingClass = true;\n    if (forceFireReachEvent === void 0) forceFireReachEvent = false;\n    var fields;\n\n    if (axis === 'top') {\n      fields = ['contentHeight', 'containerHeight', 'scrollTop', 'y', 'up', 'down'];\n    } else if (axis === 'left') {\n      fields = ['contentWidth', 'containerWidth', 'scrollLeft', 'x', 'left', 'right'];\n    } else {\n      throw new Error('A proper axis should be provided');\n    }\n\n    processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);\n  }\n\n  function processScrollDiff$1(i, diff, ref, useScrollingClass, forceFireReachEvent) {\n    var contentHeight = ref[0];\n    var containerHeight = ref[1];\n    var scrollTop = ref[2];\n    var y = ref[3];\n    var up = ref[4];\n    var down = ref[5];\n    if (useScrollingClass === void 0) useScrollingClass = true;\n    if (forceFireReachEvent === void 0) forceFireReachEvent = false;\n    var element = i.element; // reset reach\n\n    i.reach[y] = null; // 1 for subpixel rounding\n\n    if (element[scrollTop] < 1) {\n      i.reach[y] = 'start';\n    } // 1 for subpixel rounding\n\n\n    if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {\n      i.reach[y] = 'end';\n    }\n\n    if (diff) {\n      element.dispatchEvent(createEvent(\"ps-scroll-\" + y));\n\n      if (diff < 0) {\n        element.dispatchEvent(createEvent(\"ps-scroll-\" + up));\n      } else if (diff > 0) {\n        element.dispatchEvent(createEvent(\"ps-scroll-\" + down));\n      }\n\n      if (useScrollingClass) {\n        setScrollingClassInstantly(i, y);\n      }\n    }\n\n    if (i.reach[y] && (diff || forceFireReachEvent)) {\n      element.dispatchEvent(createEvent(\"ps-\" + y + \"-reach-\" + i.reach[y]));\n    }\n  }\n\n  function toInt(x) {\n    return parseInt(x, 10) || 0;\n  }\n\n  function isEditable(el) {\n    return matches(el, 'input,[contenteditable]') || matches(el, 'select,[contenteditable]') || matches(el, 'textarea,[contenteditable]') || matches(el, 'button,[contenteditable]');\n  }\n\n  function outerWidth(element) {\n    var styles = get(element);\n    return toInt(styles.width) + toInt(styles.paddingLeft) + toInt(styles.paddingRight) + toInt(styles.borderLeftWidth) + toInt(styles.borderRightWidth);\n  }\n\n  var env = {\n    isWebKit: typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style,\n    supportsTouch: typeof window !== 'undefined' && ('ontouchstart' in window || 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints > 0 || window.DocumentTouch && document instanceof window.DocumentTouch),\n    supportsIePointer: typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,\n    isChrome: typeof navigator !== 'undefined' && /Chrome/i.test(navigator && navigator.userAgent)\n  };\n\n  function updateGeometry(i) {\n    var element = i.element;\n    var roundedScrollTop = Math.floor(element.scrollTop);\n    var rect = element.getBoundingClientRect();\n    i.containerWidth = Math.ceil(rect.width);\n    i.containerHeight = Math.ceil(rect.height);\n    i.contentWidth = element.scrollWidth;\n    i.contentHeight = element.scrollHeight;\n\n    if (!element.contains(i.scrollbarXRail)) {\n      // clean up and append\n      queryChildren(element, cls.element.rail('x')).forEach(function (el) {\n        return remove(el);\n      });\n      element.appendChild(i.scrollbarXRail);\n    }\n\n    if (!element.contains(i.scrollbarYRail)) {\n      // clean up and append\n      queryChildren(element, cls.element.rail('y')).forEach(function (el) {\n        return remove(el);\n      });\n      element.appendChild(i.scrollbarYRail);\n    }\n\n    if (!i.settings.suppressScrollX && i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth) {\n      i.scrollbarXActive = true;\n      i.railXWidth = i.containerWidth - i.railXMarginWidth;\n      i.railXRatio = i.containerWidth / i.railXWidth;\n      i.scrollbarXWidth = getThumbSize(i, toInt(i.railXWidth * i.containerWidth / i.contentWidth));\n      i.scrollbarXLeft = toInt((i.negativeScrollAdjustment + element.scrollLeft) * (i.railXWidth - i.scrollbarXWidth) / (i.contentWidth - i.containerWidth));\n    } else {\n      i.scrollbarXActive = false;\n    }\n\n    if (!i.settings.suppressScrollY && i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight) {\n      i.scrollbarYActive = true;\n      i.railYHeight = i.containerHeight - i.railYMarginHeight;\n      i.railYRatio = i.containerHeight / i.railYHeight;\n      i.scrollbarYHeight = getThumbSize(i, toInt(i.railYHeight * i.containerHeight / i.contentHeight));\n      i.scrollbarYTop = toInt(roundedScrollTop * (i.railYHeight - i.scrollbarYHeight) / (i.contentHeight - i.containerHeight));\n    } else {\n      i.scrollbarYActive = false;\n    }\n\n    if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {\n      i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;\n    }\n\n    if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {\n      i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;\n    }\n\n    updateCss(element, i);\n\n    if (i.scrollbarXActive) {\n      element.classList.add(cls.state.active('x'));\n    } else {\n      element.classList.remove(cls.state.active('x'));\n      i.scrollbarXWidth = 0;\n      i.scrollbarXLeft = 0;\n      element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;\n    }\n\n    if (i.scrollbarYActive) {\n      element.classList.add(cls.state.active('y'));\n    } else {\n      element.classList.remove(cls.state.active('y'));\n      i.scrollbarYHeight = 0;\n      i.scrollbarYTop = 0;\n      element.scrollTop = 0;\n    }\n  }\n\n  function getThumbSize(i, thumbSize) {\n    if (i.settings.minScrollbarLength) {\n      thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);\n    }\n\n    if (i.settings.maxScrollbarLength) {\n      thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);\n    }\n\n    return thumbSize;\n  }\n\n  function updateCss(element, i) {\n    var xRailOffset = {\n      width: i.railXWidth\n    };\n    var roundedScrollTop = Math.floor(element.scrollTop);\n\n    if (i.isRtl) {\n      xRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth - i.contentWidth;\n    } else {\n      xRailOffset.left = element.scrollLeft;\n    }\n\n    if (i.isScrollbarXUsingBottom) {\n      xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;\n    } else {\n      xRailOffset.top = i.scrollbarXTop + roundedScrollTop;\n    }\n\n    set(i.scrollbarXRail, xRailOffset);\n    var yRailOffset = {\n      top: roundedScrollTop,\n      height: i.railYHeight\n    };\n\n    if (i.isScrollbarYUsingRight) {\n      if (i.isRtl) {\n        yRailOffset.right = i.contentWidth - (i.negativeScrollAdjustment + element.scrollLeft) - i.scrollbarYRight - i.scrollbarYOuterWidth - 9;\n      } else {\n        yRailOffset.right = i.scrollbarYRight - element.scrollLeft;\n      }\n    } else {\n      if (i.isRtl) {\n        yRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth * 2 - i.contentWidth - i.scrollbarYLeft - i.scrollbarYOuterWidth;\n      } else {\n        yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;\n      }\n    }\n\n    set(i.scrollbarYRail, yRailOffset);\n    set(i.scrollbarX, {\n      left: i.scrollbarXLeft,\n      width: i.scrollbarXWidth - i.railBorderXWidth\n    });\n    set(i.scrollbarY, {\n      top: i.scrollbarYTop,\n      height: i.scrollbarYHeight - i.railBorderYWidth\n    });\n  }\n\n  function clickRail(i) {\n    var element = i.element;\n    i.event.bind(i.scrollbarY, 'mousedown', function (e) {\n      return e.stopPropagation();\n    });\n    i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {\n      var positionTop = e.pageY - window.pageYOffset - i.scrollbarYRail.getBoundingClientRect().top;\n      var direction = positionTop > i.scrollbarYTop ? 1 : -1;\n      i.element.scrollTop += direction * i.containerHeight;\n      updateGeometry(i);\n      e.stopPropagation();\n    });\n    i.event.bind(i.scrollbarX, 'mousedown', function (e) {\n      return e.stopPropagation();\n    });\n    i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {\n      var positionLeft = e.pageX - window.pageXOffset - i.scrollbarXRail.getBoundingClientRect().left;\n      var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;\n      i.element.scrollLeft += direction * i.containerWidth;\n      updateGeometry(i);\n      e.stopPropagation();\n    });\n  }\n\n  function dragThumb(i) {\n    bindMouseScrollHandler(i, ['containerWidth', 'contentWidth', 'pageX', 'railXWidth', 'scrollbarX', 'scrollbarXWidth', 'scrollLeft', 'x', 'scrollbarXRail']);\n    bindMouseScrollHandler(i, ['containerHeight', 'contentHeight', 'pageY', 'railYHeight', 'scrollbarY', 'scrollbarYHeight', 'scrollTop', 'y', 'scrollbarYRail']);\n  }\n\n  function bindMouseScrollHandler(i, ref) {\n    var containerHeight = ref[0];\n    var contentHeight = ref[1];\n    var pageY = ref[2];\n    var railYHeight = ref[3];\n    var scrollbarY = ref[4];\n    var scrollbarYHeight = ref[5];\n    var scrollTop = ref[6];\n    var y = ref[7];\n    var scrollbarYRail = ref[8];\n    var element = i.element;\n    var startingScrollTop = null;\n    var startingMousePageY = null;\n    var scrollBy = null;\n\n    function mouseMoveHandler(e) {\n      if (e.touches && e.touches[0]) {\n        e[pageY] = e.touches[0].pageY;\n      }\n\n      element[scrollTop] = startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);\n      addScrollingClass(i, y);\n      updateGeometry(i);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    function mouseUpHandler() {\n      removeScrollingClass(i, y);\n      i[scrollbarYRail].classList.remove(cls.state.clicking);\n      i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n    }\n\n    function bindMoves(e, touchMode) {\n      startingScrollTop = element[scrollTop];\n\n      if (touchMode && e.touches) {\n        e[pageY] = e.touches[0].pageY;\n      }\n\n      startingMousePageY = e[pageY];\n      scrollBy = (i[contentHeight] - i[containerHeight]) / (i[railYHeight] - i[scrollbarYHeight]);\n\n      if (!touchMode) {\n        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);\n        e.preventDefault();\n      } else {\n        i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);\n      }\n\n      i[scrollbarYRail].classList.add(cls.state.clicking);\n      e.stopPropagation();\n    }\n\n    i.event.bind(i[scrollbarY], 'mousedown', function (e) {\n      bindMoves(e);\n    });\n    i.event.bind(i[scrollbarY], 'touchstart', function (e) {\n      bindMoves(e, true);\n    });\n  }\n\n  function keyboard(i) {\n    var element = i.element;\n\n    var elementHovered = function elementHovered() {\n      return matches(element, ':hover');\n    };\n\n    var scrollbarFocused = function scrollbarFocused() {\n      return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus');\n    };\n\n    function shouldPreventDefault(deltaX, deltaY) {\n      var scrollTop = Math.floor(element.scrollTop);\n\n      if (deltaX === 0) {\n        if (!i.scrollbarYActive) {\n          return false;\n        }\n\n        if (scrollTop === 0 && deltaY > 0 || scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0) {\n          return !i.settings.wheelPropagation;\n        }\n      }\n\n      var scrollLeft = element.scrollLeft;\n\n      if (deltaY === 0) {\n        if (!i.scrollbarXActive) {\n          return false;\n        }\n\n        if (scrollLeft === 0 && deltaX < 0 || scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0) {\n          return !i.settings.wheelPropagation;\n        }\n      }\n\n      return true;\n    }\n\n    i.event.bind(i.ownerDocument, 'keydown', function (e) {\n      if (e.isDefaultPrevented && e.isDefaultPrevented() || e.defaultPrevented) {\n        return;\n      }\n\n      if (!elementHovered() && !scrollbarFocused()) {\n        return;\n      }\n\n      var activeElement = document.activeElement ? document.activeElement : i.ownerDocument.activeElement;\n\n      if (activeElement) {\n        if (activeElement.tagName === 'IFRAME') {\n          activeElement = activeElement.contentDocument.activeElement;\n        } else {\n          // go deeper if element is a webcomponent\n          while (activeElement.shadowRoot) {\n            activeElement = activeElement.shadowRoot.activeElement;\n          }\n        }\n\n        if (isEditable(activeElement)) {\n          return;\n        }\n      }\n\n      var deltaX = 0;\n      var deltaY = 0;\n\n      switch (e.which) {\n        case 37:\n          // left\n          if (e.metaKey) {\n            deltaX = -i.contentWidth;\n          } else if (e.altKey) {\n            deltaX = -i.containerWidth;\n          } else {\n            deltaX = -30;\n          }\n\n          break;\n\n        case 38:\n          // up\n          if (e.metaKey) {\n            deltaY = i.contentHeight;\n          } else if (e.altKey) {\n            deltaY = i.containerHeight;\n          } else {\n            deltaY = 30;\n          }\n\n          break;\n\n        case 39:\n          // right\n          if (e.metaKey) {\n            deltaX = i.contentWidth;\n          } else if (e.altKey) {\n            deltaX = i.containerWidth;\n          } else {\n            deltaX = 30;\n          }\n\n          break;\n\n        case 40:\n          // down\n          if (e.metaKey) {\n            deltaY = -i.contentHeight;\n          } else if (e.altKey) {\n            deltaY = -i.containerHeight;\n          } else {\n            deltaY = -30;\n          }\n\n          break;\n\n        case 32:\n          // space bar\n          if (e.shiftKey) {\n            deltaY = i.containerHeight;\n          } else {\n            deltaY = -i.containerHeight;\n          }\n\n          break;\n\n        case 33:\n          // page up\n          deltaY = i.containerHeight;\n          break;\n\n        case 34:\n          // page down\n          deltaY = -i.containerHeight;\n          break;\n\n        case 36:\n          // home\n          deltaY = i.contentHeight;\n          break;\n\n        case 35:\n          // end\n          deltaY = -i.contentHeight;\n          break;\n\n        default:\n          return;\n      }\n\n      if (i.settings.suppressScrollX && deltaX !== 0) {\n        return;\n      }\n\n      if (i.settings.suppressScrollY && deltaY !== 0) {\n        return;\n      }\n\n      element.scrollTop -= deltaY;\n      element.scrollLeft += deltaX;\n      updateGeometry(i);\n\n      if (shouldPreventDefault(deltaX, deltaY)) {\n        e.preventDefault();\n      }\n    });\n  }\n\n  function wheel(i) {\n    var element = i.element;\n\n    function shouldPreventDefault(deltaX, deltaY) {\n      var roundedScrollTop = Math.floor(element.scrollTop);\n      var isTop = element.scrollTop === 0;\n      var isBottom = roundedScrollTop + element.offsetHeight === element.scrollHeight;\n      var isLeft = element.scrollLeft === 0;\n      var isRight = element.scrollLeft + element.offsetWidth === element.scrollWidth;\n      var hitsBound; // pick axis with primary direction\n\n      if (Math.abs(deltaY) > Math.abs(deltaX)) {\n        hitsBound = isTop || isBottom;\n      } else {\n        hitsBound = isLeft || isRight;\n      }\n\n      return hitsBound ? !i.settings.wheelPropagation : true;\n    }\n\n    function getDeltaFromEvent(e) {\n      var deltaX = e.deltaX;\n      var deltaY = -1 * e.deltaY;\n\n      if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {\n        // OS X Safari\n        deltaX = -1 * e.wheelDeltaX / 6;\n        deltaY = e.wheelDeltaY / 6;\n      }\n\n      if (e.deltaMode && e.deltaMode === 1) {\n        // Firefox in deltaMode 1: Line scrolling\n        deltaX *= 10;\n        deltaY *= 10;\n      }\n\n      if (deltaX !== deltaX && deltaY !== deltaY\n      /* NaN checks */\n      ) {\n          // IE in some mouse drivers\n          deltaX = 0;\n          deltaY = e.wheelDelta;\n        }\n\n      if (e.shiftKey) {\n        // reverse axis with shift key\n        return [-deltaY, -deltaX];\n      }\n\n      return [deltaX, deltaY];\n    }\n\n    function shouldBeConsumedByChild(target, deltaX, deltaY) {\n      // FIXME: this is a workaround for <select> issue in FF and IE #571\n      if (!env.isWebKit && element.querySelector('select:focus')) {\n        return true;\n      }\n\n      if (!element.contains(target)) {\n        return false;\n      }\n\n      var cursor = target;\n\n      while (cursor && cursor !== element) {\n        if (cursor.classList.contains(cls.element.consuming)) {\n          return true;\n        }\n\n        var style = get(cursor); // if deltaY && vertical scrollable\n\n        if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n          var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n\n          if (maxScrollTop > 0) {\n            if (cursor.scrollTop > 0 && deltaY < 0 || cursor.scrollTop < maxScrollTop && deltaY > 0) {\n              return true;\n            }\n          }\n        } // if deltaX && horizontal scrollable\n\n\n        if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n          var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n\n          if (maxScrollLeft > 0) {\n            if (cursor.scrollLeft > 0 && deltaX < 0 || cursor.scrollLeft < maxScrollLeft && deltaX > 0) {\n              return true;\n            }\n          }\n        }\n\n        cursor = cursor.parentNode;\n      }\n\n      return false;\n    }\n\n    function mousewheelHandler(e) {\n      var ref = getDeltaFromEvent(e);\n      var deltaX = ref[0];\n      var deltaY = ref[1];\n\n      if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {\n        return;\n      }\n\n      var shouldPrevent = false;\n\n      if (!i.settings.useBothWheelAxes) {\n        // deltaX will only be used for horizontal scrolling and deltaY will\n        // only be used for vertical scrolling - this is the default\n        element.scrollTop -= deltaY * i.settings.wheelSpeed;\n        element.scrollLeft += deltaX * i.settings.wheelSpeed;\n      } else if (i.scrollbarYActive && !i.scrollbarXActive) {\n        // only vertical scrollbar is active and useBothWheelAxes option is\n        // active, so let's scroll vertical bar using both mouse wheel axes\n        if (deltaY) {\n          element.scrollTop -= deltaY * i.settings.wheelSpeed;\n        } else {\n          element.scrollTop += deltaX * i.settings.wheelSpeed;\n        }\n\n        shouldPrevent = true;\n      } else if (i.scrollbarXActive && !i.scrollbarYActive) {\n        // useBothWheelAxes and only horizontal bar is active, so use both\n        // wheel axes for horizontal bar\n        if (deltaX) {\n          element.scrollLeft += deltaX * i.settings.wheelSpeed;\n        } else {\n          element.scrollLeft -= deltaY * i.settings.wheelSpeed;\n        }\n\n        shouldPrevent = true;\n      }\n\n      updateGeometry(i);\n      shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);\n\n      if (shouldPrevent && !e.ctrlKey) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n\n    if (typeof window.onwheel !== 'undefined') {\n      i.event.bind(element, 'wheel', mousewheelHandler);\n    } else if (typeof window.onmousewheel !== 'undefined') {\n      i.event.bind(element, 'mousewheel', mousewheelHandler);\n    }\n  }\n\n  function touch(i) {\n    if (!env.supportsTouch && !env.supportsIePointer) {\n      return;\n    }\n\n    var element = i.element;\n\n    function shouldPrevent(deltaX, deltaY) {\n      var scrollTop = Math.floor(element.scrollTop);\n      var scrollLeft = element.scrollLeft;\n      var magnitudeX = Math.abs(deltaX);\n      var magnitudeY = Math.abs(deltaY);\n\n      if (magnitudeY > magnitudeX) {\n        // user is perhaps trying to swipe up/down the page\n        if (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight || deltaY > 0 && scrollTop === 0) {\n          // set prevent for mobile Chrome refresh\n          return window.scrollY === 0 && deltaY > 0 && env.isChrome;\n        }\n      } else if (magnitudeX > magnitudeY) {\n        // user is perhaps trying to swipe left/right across the page\n        if (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth || deltaX > 0 && scrollLeft === 0) {\n          return true;\n        }\n      }\n\n      return true;\n    }\n\n    function applyTouchMove(differenceX, differenceY) {\n      element.scrollTop -= differenceY;\n      element.scrollLeft -= differenceX;\n      updateGeometry(i);\n    }\n\n    var startOffset = {};\n    var startTime = 0;\n    var speed = {};\n    var easingLoop = null;\n\n    function getTouch(e) {\n      if (e.targetTouches) {\n        return e.targetTouches[0];\n      } else {\n        // Maybe IE pointer\n        return e;\n      }\n    }\n\n    function shouldHandle(e) {\n      if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {\n        return false;\n      }\n\n      if (e.targetTouches && e.targetTouches.length === 1) {\n        return true;\n      }\n\n      if (e.pointerType && e.pointerType !== 'mouse' && e.pointerType !== e.MSPOINTER_TYPE_MOUSE) {\n        return true;\n      }\n\n      return false;\n    }\n\n    function touchStart(e) {\n      if (!shouldHandle(e)) {\n        return;\n      }\n\n      var touch = getTouch(e);\n      startOffset.pageX = touch.pageX;\n      startOffset.pageY = touch.pageY;\n      startTime = new Date().getTime();\n\n      if (easingLoop !== null) {\n        clearInterval(easingLoop);\n      }\n    }\n\n    function shouldBeConsumedByChild(target, deltaX, deltaY) {\n      if (!element.contains(target)) {\n        return false;\n      }\n\n      var cursor = target;\n\n      while (cursor && cursor !== element) {\n        if (cursor.classList.contains(cls.element.consuming)) {\n          return true;\n        }\n\n        var style = get(cursor); // if deltaY && vertical scrollable\n\n        if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n          var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n\n          if (maxScrollTop > 0) {\n            if (cursor.scrollTop > 0 && deltaY < 0 || cursor.scrollTop < maxScrollTop && deltaY > 0) {\n              return true;\n            }\n          }\n        } // if deltaX && horizontal scrollable\n\n\n        if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n          var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n\n          if (maxScrollLeft > 0) {\n            if (cursor.scrollLeft > 0 && deltaX < 0 || cursor.scrollLeft < maxScrollLeft && deltaX > 0) {\n              return true;\n            }\n          }\n        }\n\n        cursor = cursor.parentNode;\n      }\n\n      return false;\n    }\n\n    function touchMove(e) {\n      if (shouldHandle(e)) {\n        var touch = getTouch(e);\n        var currentOffset = {\n          pageX: touch.pageX,\n          pageY: touch.pageY\n        };\n        var differenceX = currentOffset.pageX - startOffset.pageX;\n        var differenceY = currentOffset.pageY - startOffset.pageY;\n\n        if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {\n          return;\n        }\n\n        applyTouchMove(differenceX, differenceY);\n        startOffset = currentOffset;\n        var currentTime = new Date().getTime();\n        var timeGap = currentTime - startTime;\n\n        if (timeGap > 0) {\n          speed.x = differenceX / timeGap;\n          speed.y = differenceY / timeGap;\n          startTime = currentTime;\n        }\n\n        if (shouldPrevent(differenceX, differenceY)) {\n          e.preventDefault();\n        }\n      }\n    }\n\n    function touchEnd() {\n      if (i.settings.swipeEasing) {\n        clearInterval(easingLoop);\n        easingLoop = setInterval(function () {\n          if (i.isInitialized) {\n            clearInterval(easingLoop);\n            return;\n          }\n\n          if (!speed.x && !speed.y) {\n            clearInterval(easingLoop);\n            return;\n          }\n\n          if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {\n            clearInterval(easingLoop);\n            return;\n          }\n\n          applyTouchMove(speed.x * 30, speed.y * 30);\n          speed.x *= 0.8;\n          speed.y *= 0.8;\n        }, 10);\n      }\n    }\n\n    if (env.supportsTouch) {\n      i.event.bind(element, 'touchstart', touchStart);\n      i.event.bind(element, 'touchmove', touchMove);\n      i.event.bind(element, 'touchend', touchEnd);\n    } else if (env.supportsIePointer) {\n      if (window.PointerEvent) {\n        i.event.bind(element, 'pointerdown', touchStart);\n        i.event.bind(element, 'pointermove', touchMove);\n        i.event.bind(element, 'pointerup', touchEnd);\n      } else if (window.MSPointerEvent) {\n        i.event.bind(element, 'MSPointerDown', touchStart);\n        i.event.bind(element, 'MSPointerMove', touchMove);\n        i.event.bind(element, 'MSPointerUp', touchEnd);\n      }\n    }\n  }\n\n  var defaultSettings = function defaultSettings() {\n    return {\n      handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],\n      maxScrollbarLength: null,\n      minScrollbarLength: null,\n      scrollingThreshold: 1000,\n      scrollXMarginOffset: 0,\n      scrollYMarginOffset: 0,\n      suppressScrollX: false,\n      suppressScrollY: false,\n      swipeEasing: true,\n      useBothWheelAxes: false,\n      wheelPropagation: true,\n      wheelSpeed: 1\n    };\n  };\n\n  var handlers = {\n    'click-rail': clickRail,\n    'drag-thumb': dragThumb,\n    keyboard: keyboard,\n    wheel: wheel,\n    touch: touch\n  };\n\n  var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {\n    var this$1 = this;\n    if (userSettings === void 0) userSettings = {};\n\n    if (typeof element === 'string') {\n      element = document.querySelector(element);\n    }\n\n    if (!element || !element.nodeName) {\n      throw new Error('no element is specified to initialize PerfectScrollbar');\n    }\n\n    this.element = element;\n    element.classList.add(cls.main);\n    this.settings = defaultSettings();\n\n    for (var key in userSettings) {\n      this.settings[key] = userSettings[key];\n    }\n\n    this.containerWidth = null;\n    this.containerHeight = null;\n    this.contentWidth = null;\n    this.contentHeight = null;\n\n    var focus = function focus() {\n      return element.classList.add(cls.state.focus);\n    };\n\n    var blur = function blur() {\n      return element.classList.remove(cls.state.focus);\n    };\n\n    this.isRtl = get(element).direction === 'rtl';\n\n    if (this.isRtl === true) {\n      element.classList.add(cls.rtl);\n    }\n\n    this.isNegativeScroll = function () {\n      var originalScrollLeft = element.scrollLeft;\n      var result = null;\n      element.scrollLeft = -1;\n      result = element.scrollLeft < 0;\n      element.scrollLeft = originalScrollLeft;\n      return result;\n    }();\n\n    this.negativeScrollAdjustment = this.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;\n    this.event = new EventManager();\n    this.ownerDocument = element.ownerDocument || document;\n    this.scrollbarXRail = div(cls.element.rail('x'));\n    element.appendChild(this.scrollbarXRail);\n    this.scrollbarX = div(cls.element.thumb('x'));\n    this.scrollbarXRail.appendChild(this.scrollbarX);\n    this.scrollbarX.setAttribute('tabindex', 0);\n    this.event.bind(this.scrollbarX, 'focus', focus);\n    this.event.bind(this.scrollbarX, 'blur', blur);\n    this.scrollbarXActive = null;\n    this.scrollbarXWidth = null;\n    this.scrollbarXLeft = null;\n    var railXStyle = get(this.scrollbarXRail);\n    this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);\n\n    if (isNaN(this.scrollbarXBottom)) {\n      this.isScrollbarXUsingBottom = false;\n      this.scrollbarXTop = toInt(railXStyle.top);\n    } else {\n      this.isScrollbarXUsingBottom = true;\n    }\n\n    this.railBorderXWidth = toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth); // Set rail to display:block to calculate margins\n\n    set(this.scrollbarXRail, {\n      display: 'block'\n    });\n    this.railXMarginWidth = toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);\n    set(this.scrollbarXRail, {\n      display: ''\n    });\n    this.railXWidth = null;\n    this.railXRatio = null;\n    this.scrollbarYRail = div(cls.element.rail('y'));\n    element.appendChild(this.scrollbarYRail);\n    this.scrollbarY = div(cls.element.thumb('y'));\n    this.scrollbarYRail.appendChild(this.scrollbarY);\n    this.scrollbarY.setAttribute('tabindex', 0);\n    this.event.bind(this.scrollbarY, 'focus', focus);\n    this.event.bind(this.scrollbarY, 'blur', blur);\n    this.scrollbarYActive = null;\n    this.scrollbarYHeight = null;\n    this.scrollbarYTop = null;\n    var railYStyle = get(this.scrollbarYRail);\n    this.scrollbarYRight = parseInt(railYStyle.right, 10);\n\n    if (isNaN(this.scrollbarYRight)) {\n      this.isScrollbarYUsingRight = false;\n      this.scrollbarYLeft = toInt(railYStyle.left);\n    } else {\n      this.isScrollbarYUsingRight = true;\n    }\n\n    this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;\n    this.railBorderYWidth = toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);\n    set(this.scrollbarYRail, {\n      display: 'block'\n    });\n    this.railYMarginHeight = toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);\n    set(this.scrollbarYRail, {\n      display: ''\n    });\n    this.railYHeight = null;\n    this.railYRatio = null;\n    this.reach = {\n      x: element.scrollLeft <= 0 ? 'start' : element.scrollLeft >= this.contentWidth - this.containerWidth ? 'end' : null,\n      y: element.scrollTop <= 0 ? 'start' : element.scrollTop >= this.contentHeight - this.containerHeight ? 'end' : null\n    };\n    this.isAlive = true;\n    this.settings.handlers.forEach(function (handlerName) {\n      return handlers[handlerName](this$1);\n    });\n    this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only\n\n    this.lastScrollLeft = element.scrollLeft; // for onScroll only\n\n    this.event.bind(this.element, 'scroll', function (e) {\n      return this$1.onScroll(e);\n    });\n    updateGeometry(this);\n  };\n\n  PerfectScrollbar.prototype.update = function update() {\n    if (!this.isAlive) {\n      return;\n    } // Recalcuate negative scrollLeft adjustment\n\n\n    this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0; // Recalculate rail margins\n\n    set(this.scrollbarXRail, {\n      display: 'block'\n    });\n    set(this.scrollbarYRail, {\n      display: 'block'\n    });\n    this.railXMarginWidth = toInt(get(this.scrollbarXRail).marginLeft) + toInt(get(this.scrollbarXRail).marginRight);\n    this.railYMarginHeight = toInt(get(this.scrollbarYRail).marginTop) + toInt(get(this.scrollbarYRail).marginBottom); // Hide scrollbars not to affect scrollWidth and scrollHeight\n\n    set(this.scrollbarXRail, {\n      display: 'none'\n    });\n    set(this.scrollbarYRail, {\n      display: 'none'\n    });\n    updateGeometry(this);\n    processScrollDiff(this, 'top', 0, false, true);\n    processScrollDiff(this, 'left', 0, false, true);\n    set(this.scrollbarXRail, {\n      display: ''\n    });\n    set(this.scrollbarYRail, {\n      display: ''\n    });\n  };\n\n  PerfectScrollbar.prototype.onScroll = function onScroll(e) {\n    if (!this.isAlive) {\n      return;\n    }\n\n    updateGeometry(this);\n    processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);\n    processScrollDiff(this, 'left', this.element.scrollLeft - this.lastScrollLeft);\n    this.lastScrollTop = Math.floor(this.element.scrollTop);\n    this.lastScrollLeft = this.element.scrollLeft;\n  };\n\n  PerfectScrollbar.prototype.destroy = function destroy() {\n    if (!this.isAlive) {\n      return;\n    }\n\n    this.event.unbindAll();\n    remove(this.scrollbarX);\n    remove(this.scrollbarY);\n    remove(this.scrollbarXRail);\n    remove(this.scrollbarYRail);\n    this.removePsClasses(); // unset elements\n\n    this.element = null;\n    this.scrollbarX = null;\n    this.scrollbarY = null;\n    this.scrollbarXRail = null;\n    this.scrollbarYRail = null;\n    this.isAlive = false;\n  };\n\n  PerfectScrollbar.prototype.removePsClasses = function removePsClasses() {\n    this.element.className = this.element.className.split(' ').filter(function (name) {\n      return !name.match(/^ps([-_].+|)$/);\n    }).join(' ');\n  };\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$b = 'sidebar';\n  var VERSION$b = '3.2.2';\n  var DATA_KEY$b = 'coreui.sidebar';\n  var EVENT_KEY$b = \".\" + DATA_KEY$b;\n  var DATA_API_KEY$9 = '.data-api';\n  var Default$9 = {\n    activeLinksExact: true,\n    breakpoints: {\n      xs: 'c-sidebar-show',\n      sm: 'c-sidebar-sm-show',\n      md: 'c-sidebar-md-show',\n      lg: 'c-sidebar-lg-show',\n      xl: 'c-sidebar-xl-show',\n      xxl: 'c-sidebar-xxl-show'\n    },\n    dropdownAccordion: true\n  };\n  var DefaultType$8 = {\n    activeLinksExact: 'boolean',\n    breakpoints: 'object',\n    dropdownAccordion: '(string|boolean)'\n  };\n  var CLASS_NAME_ACTIVE$4 = 'c-active';\n  var CLASS_NAME_BACKDROP$1 = 'c-sidebar-backdrop';\n  var CLASS_NAME_FADE$3 = 'c-fade';\n  var CLASS_NAME_NAV_DROPDOWN = 'c-sidebar-nav-dropdown';\n  var CLASS_NAME_NAV_DROPDOWN_TOGGLE$1 = 'c-sidebar-nav-dropdown-toggle';\n  var CLASS_NAME_SHOW$6 = 'c-show';\n  var CLASS_NAME_SIDEBAR_MINIMIZED = 'c-sidebar-minimized';\n  var CLASS_NAME_SIDEBAR_OVERLAID = 'c-sidebar-overlaid';\n  var CLASS_NAME_SIDEBAR_UNFOLDABLE = 'c-sidebar-unfoldable';\n  var EVENT_CLASS_TOGGLE$1 = 'classtoggle';\n  var EVENT_CLICK_DATA_API$8 = \"click\" + EVENT_KEY$b + DATA_API_KEY$9;\n  var EVENT_CLOSE$1 = \"close\" + EVENT_KEY$b;\n  var EVENT_CLOSED$1 = \"closed\" + EVENT_KEY$b;\n  var EVENT_LOAD_DATA_API$2 = \"load\" + EVENT_KEY$b + DATA_API_KEY$9;\n  var EVENT_OPEN = \"open\" + EVENT_KEY$b;\n  var EVENT_OPENED = \"opened\" + EVENT_KEY$b;\n  var SELECTOR_NAV_DROPDOWN_TOGGLE = '.c-sidebar-nav-dropdown-toggle';\n  var SELECTOR_NAV_DROPDOWN$1 = '.c-sidebar-nav-dropdown';\n  var SELECTOR_NAV_LINK$1 = '.c-sidebar-nav-link';\n  var SELECTOR_NAVIGATION_CONTAINER = '.c-sidebar-nav';\n  var SELECTOR_SIDEBAR = '.c-sidebar';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Sidebar = /*#__PURE__*/function () {\n    function Sidebar(element, config) {\n      if (typeof PerfectScrollbar === 'undefined') {\n        throw new TypeError('CoreUI\\'s sidebar require Perfect Scrollbar');\n      }\n\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._open = this._isVisible();\n      this._mobile = this._isMobile();\n      this._overlaid = this._isOverlaid();\n      this._minimize = this._isMinimized();\n      this._unfoldable = this._isUnfoldable();\n\n      this._setActiveLink();\n\n      this._ps = null;\n      this._backdrop = null;\n\n      this._psInit();\n\n      this._addEventListeners();\n\n      Data.setData(element, DATA_KEY$b, this);\n    } // Getters\n\n\n    var _proto = Sidebar.prototype; // Public\n\n    _proto.open = function open(breakpoint) {\n      var _this = this;\n\n      EventHandler.trigger(this._element, EVENT_OPEN);\n\n      if (this._isMobile()) {\n        this._addClassName(this._firstBreakpointClassName());\n\n        this._showBackdrop();\n\n        EventHandler.one(this._element, TRANSITION_END, function () {\n          _this._addClickOutListener();\n        });\n      } else if (breakpoint) {\n        this._addClassName(this._getBreakpointClassName(breakpoint));\n\n        if (this._isOverlaid()) {\n          EventHandler.one(this._element, TRANSITION_END, function () {\n            _this._addClickOutListener();\n          });\n        }\n      } else {\n        this._addClassName(this._firstBreakpointClassName());\n\n        if (this._isOverlaid()) {\n          EventHandler.one(this._element, TRANSITION_END, function () {\n            _this._addClickOutListener();\n          });\n        }\n      }\n\n      var complete = function complete() {\n        if (_this._isVisible() === true) {\n          _this._open = true;\n          EventHandler.trigger(_this._element, EVENT_OPENED);\n        }\n      };\n\n      var transitionDuration = getTransitionDurationFromElement(this._element);\n      EventHandler.one(this._element, TRANSITION_END, complete);\n      emulateTransitionEnd(this._element, transitionDuration);\n    };\n\n    _proto.close = function close(breakpoint) {\n      var _this2 = this;\n\n      EventHandler.trigger(this._element, EVENT_CLOSE$1);\n\n      if (this._isMobile()) {\n        this._element.classList.remove(this._firstBreakpointClassName());\n\n        this._removeBackdrop();\n\n        this._removeClickOutListener();\n      } else if (breakpoint) {\n        this._element.classList.remove(this._getBreakpointClassName(breakpoint));\n\n        if (this._isOverlaid()) {\n          this._removeClickOutListener();\n        }\n      } else {\n        this._element.classList.remove(this._firstBreakpointClassName());\n\n        if (this._isOverlaid()) {\n          this._removeClickOutListener();\n        }\n      }\n\n      var complete = function complete() {\n        if (_this2._isVisible() === false) {\n          _this2._open = false;\n          EventHandler.trigger(_this2._element, EVENT_CLOSED$1);\n        }\n      };\n\n      var transitionDuration = getTransitionDurationFromElement(this._element);\n      EventHandler.one(this._element, TRANSITION_END, complete);\n      emulateTransitionEnd(this._element, transitionDuration);\n    };\n\n    _proto.toggle = function toggle(breakpoint) {\n      if (this._open) {\n        this.close(breakpoint);\n      } else {\n        this.open(breakpoint);\n      }\n    };\n\n    _proto.minimize = function minimize() {\n      if (!this._isMobile()) {\n        this._addClassName(CLASS_NAME_SIDEBAR_MINIMIZED);\n\n        this._minimize = true;\n\n        this._psDestroy();\n      }\n    };\n\n    _proto.unfoldable = function unfoldable() {\n      if (!this._isMobile()) {\n        this._addClassName(CLASS_NAME_SIDEBAR_UNFOLDABLE);\n\n        this._unfoldable = true;\n      }\n    };\n\n    _proto.reset = function reset() {\n      if (this._element.classList.contains(CLASS_NAME_SIDEBAR_MINIMIZED)) {\n        this._element.classList.remove(CLASS_NAME_SIDEBAR_MINIMIZED);\n\n        this._minimize = false;\n        EventHandler.one(this._element, TRANSITION_END, this._psInit());\n      }\n\n      if (this._element.classList.contains(CLASS_NAME_SIDEBAR_UNFOLDABLE)) {\n        this._element.classList.remove(CLASS_NAME_SIDEBAR_UNFOLDABLE);\n\n        this._unfoldable = false;\n      }\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);\n      typeCheckConfig(NAME$b, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._isMobile = function _isMobile() {\n      return Boolean(window.getComputedStyle(this._element, null).getPropertyValue('--is-mobile'));\n    };\n\n    _proto._isIOS = function _isIOS() {\n      var iOSDevices = ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'];\n      var platform = Boolean(navigator.platform);\n\n      if (platform) {\n        while (iOSDevices.length) {\n          if (navigator.platform === iOSDevices.pop()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._isMinimized = function _isMinimized() {\n      return this._element.classList.contains(CLASS_NAME_SIDEBAR_MINIMIZED);\n    };\n\n    _proto._isOverlaid = function _isOverlaid() {\n      return this._element.classList.contains(CLASS_NAME_SIDEBAR_OVERLAID);\n    };\n\n    _proto._isUnfoldable = function _isUnfoldable() {\n      return this._element.classList.contains(CLASS_NAME_SIDEBAR_UNFOLDABLE);\n    };\n\n    _proto._isVisible = function _isVisible() {\n      var rect = this._element.getBoundingClientRect();\n\n      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      /* or $(window).height() */\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n      /* or $(window).width() */\n      ;\n    };\n\n    _proto._addClassName = function _addClassName(className) {\n      this._element.classList.add(className);\n    };\n\n    _proto._firstBreakpointClassName = function _firstBreakpointClassName() {\n      return Object.keys(Default$9.breakpoints).map(function (key) {\n        return Default$9.breakpoints[key];\n      })[0];\n    };\n\n    _proto._getBreakpointClassName = function _getBreakpointClassName(breakpoint) {\n      return Default$9.breakpoints[breakpoint];\n    };\n\n    _proto._removeBackdrop = function _removeBackdrop() {\n      if (this._backdrop) {\n        this._backdrop.parentNode.removeChild(this._backdrop);\n\n        this._backdrop = null;\n      }\n    };\n\n    _proto._showBackdrop = function _showBackdrop() {\n      if (!this._backdrop) {\n        this._backdrop = document.createElement('div');\n        this._backdrop.className = CLASS_NAME_BACKDROP$1;\n\n        this._backdrop.classList.add(CLASS_NAME_FADE$3);\n\n        document.body.appendChild(this._backdrop);\n        reflow(this._backdrop);\n\n        this._backdrop.classList.add(CLASS_NAME_SHOW$6);\n      }\n    };\n\n    _proto._clickOutListener = function _clickOutListener(event, sidebar) {\n      if (event.target.closest(SELECTOR_SIDEBAR) === null) {\n        // or use:\n        event.preventDefault();\n        event.stopPropagation();\n        sidebar.close();\n      }\n    };\n\n    _proto._addClickOutListener = function _addClickOutListener() {\n      var _this3 = this;\n\n      EventHandler.on(document, EVENT_CLICK_DATA_API$8, function (event) {\n        _this3._clickOutListener(event, _this3);\n      });\n    };\n\n    _proto._removeClickOutListener = function _removeClickOutListener() {\n      EventHandler.off(document, EVENT_CLICK_DATA_API$8);\n    } // Sidebar navigation\n    ;\n\n    _proto._getAllSiblings = function _getAllSiblings(element, filter) {\n      var siblings = [];\n      element = element.parentNode.firstChild;\n\n      do {\n        if (element.nodeType === 3) {\n          continue; // text node\n        }\n\n        if (element.nodeType === 8) {\n          continue; // comment node\n        }\n\n        if (!filter || filter(element)) {\n          siblings.push(element);\n        } // eslint-disable-next-line no-cond-assign\n\n      } while (element = element.nextSibling);\n\n      return siblings;\n    };\n\n    _proto._toggleDropdown = function _toggleDropdown(event, sidebar) {\n      var toggler = event.target;\n\n      if (!toggler.classList.contains(CLASS_NAME_NAV_DROPDOWN_TOGGLE$1)) {\n        toggler = toggler.closest(SELECTOR_NAV_DROPDOWN_TOGGLE);\n      }\n\n      var dataAttributes = toggler.closest(SELECTOR_NAVIGATION_CONTAINER).dataset;\n\n      if (typeof dataAttributes.dropdownAccordion !== 'undefined') {\n        Default$9.dropdownAccordion = JSON.parse(dataAttributes.dropdownAccordion);\n      } // TODO: find better solution\n\n\n      if (Default$9.dropdownAccordion === true) {\n        this._getAllSiblings(toggler.parentElement, function (element) {\n          return Boolean(element.classList.contains(CLASS_NAME_NAV_DROPDOWN));\n        }).forEach(function (element) {\n          if (element !== toggler.parentNode) {\n            if (element.classList.contains(CLASS_NAME_NAV_DROPDOWN)) {\n              element.classList.remove(CLASS_NAME_SHOW$6);\n            }\n          }\n        });\n      }\n\n      toggler.parentNode.classList.toggle(CLASS_NAME_SHOW$6); // TODO: Set the toggler's position near to cursor after the click.\n      // TODO: add transition end\n\n      sidebar._psUpdate();\n    } // PerfectScrollbar\n    ;\n\n    _proto._psInit = function _psInit() {\n      if (this._element.querySelector(SELECTOR_NAVIGATION_CONTAINER) && !this._isIOS()) {\n        this._ps = new PerfectScrollbar(this._element.querySelector(SELECTOR_NAVIGATION_CONTAINER), {\n          suppressScrollX: true,\n          wheelPropagation: false\n        });\n      }\n    };\n\n    _proto._psUpdate = function _psUpdate() {\n      if (this._ps) {\n        this._ps.update();\n      }\n    };\n\n    _proto._psDestroy = function _psDestroy() {\n      if (this._ps) {\n        this._ps.destroy();\n\n        this._ps = null;\n      }\n    };\n\n    _proto._getParents = function _getParents(element, selector) {\n      // Setup parents array\n      var parents = []; // Get matching parent elements\n\n      for (; element && element !== document; element = element.parentNode) {\n        // Add matching parents to array\n        if (selector) {\n          if (element.matches(selector)) {\n            parents.push(element);\n          }\n        } else {\n          parents.push(element);\n        }\n      }\n\n      return parents;\n    };\n\n    _proto._setActiveLink = function _setActiveLink() {\n      var _this4 = this; // eslint-disable-next-line unicorn/prefer-spread\n\n\n      Array.from(this._element.querySelectorAll(SELECTOR_NAV_LINK$1)).forEach(function (element) {\n        var currentUrl = String(window.location);\n        var urlHasParams = /\\?.*=/;\n        var urlHasQueryString = /\\?./;\n        var urlHasHash = /#./;\n\n        if (urlHasParams.test(currentUrl) || urlHasQueryString.test(currentUrl)) {\n          currentUrl = currentUrl.split('?')[0];\n        }\n\n        if (urlHasHash.test(currentUrl)) {\n          currentUrl = currentUrl.split('#')[0];\n        }\n\n        var dataAttributes = element.closest(SELECTOR_NAVIGATION_CONTAINER).dataset;\n\n        if (typeof dataAttributes.activeLinksExact !== 'undefined') {\n          Default$9.activeLinksExact = JSON.parse(dataAttributes.activeLinksExact);\n        }\n\n        if (Default$9.activeLinksExact && element.href === currentUrl) {\n          element.classList.add(CLASS_NAME_ACTIVE$4); // eslint-disable-next-line unicorn/prefer-spread\n\n          Array.from(_this4._getParents(element, SELECTOR_NAV_DROPDOWN$1)).forEach(function (element) {\n            element.classList.add(CLASS_NAME_SHOW$6);\n          });\n        }\n\n        if (!Default$9.activeLinksExact && element.href.startsWith(currentUrl)) {\n          element.classList.add(CLASS_NAME_ACTIVE$4); // eslint-disable-next-line unicorn/prefer-spread\n\n          Array.from(_this4._getParents(element, SELECTOR_NAV_DROPDOWN$1)).forEach(function (element) {\n            element.classList.add(CLASS_NAME_SHOW$6);\n          });\n        }\n      });\n    };\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this5 = this;\n\n      if (this._mobile && this._open) {\n        this._addClickOutListener();\n      }\n\n      if (this._overlaid && this._open) {\n        this._addClickOutListener();\n      }\n\n      EventHandler.on(this._element, EVENT_CLASS_TOGGLE$1, function (event) {\n        if (event.detail.className === CLASS_NAME_SIDEBAR_MINIMIZED) {\n          if (_this5._element.classList.contains(CLASS_NAME_SIDEBAR_MINIMIZED)) {\n            _this5.minimize();\n          } else {\n            _this5.reset();\n          }\n        }\n\n        if (event.detail.className === CLASS_NAME_SIDEBAR_UNFOLDABLE) {\n          if (_this5._element.classList.contains(CLASS_NAME_SIDEBAR_UNFOLDABLE)) {\n            _this5.unfoldable();\n          } else {\n            _this5.reset();\n          }\n        }\n\n        if (typeof Object.keys(Default$9.breakpoints).find(function (key) {\n          return Default$9.breakpoints[key] === event.detail.className;\n        }) !== 'undefined') {\n          var className = event.detail.className;\n          var breakpoint = Object.keys(Default$9.breakpoints).find(function (key) {\n            return Default$9.breakpoints[key] === className;\n          });\n\n          if (event.detail.add) {\n            _this5.open(breakpoint);\n          } else {\n            _this5.close(breakpoint);\n          }\n        }\n      });\n      EventHandler.on(this._element, EVENT_CLICK_DATA_API$8, SELECTOR_NAV_DROPDOWN_TOGGLE, function (event) {\n        event.preventDefault();\n\n        _this5._toggleDropdown(event, _this5);\n      });\n      EventHandler.on(this._element, EVENT_CLICK_DATA_API$8, SELECTOR_NAV_LINK$1, function () {\n        if (_this5._isMobile()) {\n          _this5.close();\n        }\n      });\n    } // Static\n    ;\n\n    Sidebar._sidebarInterface = function _sidebarInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$b);\n\n      var _config = _typeof(config) === 'object' && config;\n\n      if (!data) {\n        data = new Sidebar(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    Sidebar.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Sidebar._sidebarInterface(this, config);\n      });\n    };\n\n    Sidebar.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$b);\n    };\n\n    _createClass(Sidebar, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$b;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$9;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$8;\n      }\n    }]);\n\n    return Sidebar;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {\n    // eslint-disable-next-line unicorn/prefer-spread\n    Array.from(document.querySelectorAll(SELECTOR_SIDEBAR)).forEach(function (element) {\n      Sidebar._sidebarInterface(element);\n    });\n  });\n  var $$c = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  if ($$c) {\n    var JQUERY_NO_CONFLICT$b = $$c.fn[NAME$b];\n    $$c.fn[NAME$b] = Sidebar.jQueryInterface;\n    $$c.fn[NAME$b].Constructor = Sidebar;\n\n    $$c.fn[NAME$b].noConflict = function () {\n      $$c.fn[NAME$b] = JQUERY_NO_CONFLICT$b;\n      return Sidebar.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$c = 'tab';\n  var VERSION$c = '3.2.2';\n  var DATA_KEY$c = 'coreui.tab';\n  var EVENT_KEY$c = \".\" + DATA_KEY$c;\n  var DATA_API_KEY$a = '.data-api';\n  var EVENT_HIDE$3 = \"hide\" + EVENT_KEY$c;\n  var EVENT_HIDDEN$3 = \"hidden\" + EVENT_KEY$c;\n  var EVENT_SHOW$3 = \"show\" + EVENT_KEY$c;\n  var EVENT_SHOWN$3 = \"shown\" + EVENT_KEY$c;\n  var EVENT_CLICK_DATA_API$9 = \"click\" + EVENT_KEY$c + DATA_API_KEY$a;\n  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n  var CLASS_NAME_ACTIVE$5 = 'active';\n  var CLASS_NAME_DISABLED$2 = 'disabled';\n  var CLASS_NAME_FADE$4 = 'fade';\n  var CLASS_NAME_SHOW$7 = 'show';\n  var SELECTOR_DROPDOWN$1 = '.dropdown';\n  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\n  var SELECTOR_ACTIVE$2 = '.active';\n  var SELECTOR_ACTIVE_UL = ':scope > li > .active';\n  var SELECTOR_DATA_TOGGLE$4 = '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]';\n  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  var SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Tab = /*#__PURE__*/function () {\n    function Tab(element) {\n      this._element = element;\n      Data.setData(this._element, DATA_KEY$c, this);\n    } // Getters\n\n\n    var _proto = Tab.prototype; // Public\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE$5) || this._element.classList.contains(CLASS_NAME_DISABLED$2)) {\n        return;\n      }\n\n      var previous;\n      var target = getElementFromSelector(this._element);\n\n      var listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP$1);\n\n      if (listElement) {\n        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE$2;\n        previous = SelectorEngine.find(itemSelector, listElement);\n        previous = previous[previous.length - 1];\n      }\n\n      var hideEvent = null;\n\n      if (previous) {\n        hideEvent = EventHandler.trigger(previous, EVENT_HIDE$3, {\n          relatedTarget: this._element\n        });\n      }\n\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n        relatedTarget: previous\n      });\n\n      if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._activate(this._element, listElement);\n\n      var complete = function complete() {\n        EventHandler.trigger(previous, EVENT_HIDDEN$3, {\n          relatedTarget: _this._element\n        });\n        EventHandler.trigger(_this._element, EVENT_SHOWN$3, {\n          relatedTarget: previous\n        });\n      };\n\n      if (target) {\n        this._activate(target, target.parentNode, complete);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$c);\n      this._element = null;\n    } // Private\n    ;\n\n    _proto._activate = function _activate(element, container, callback) {\n      var _this2 = this;\n\n      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE$2);\n      var active = activeElements[0];\n      var isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$4);\n\n      var complete = function complete() {\n        return _this2._transitionComplete(element, active, callback);\n      };\n\n      if (active && isTransitioning) {\n        var transitionDuration = getTransitionDurationFromElement(active);\n        active.classList.remove(CLASS_NAME_SHOW$7);\n        EventHandler.one(active, TRANSITION_END, complete);\n        emulateTransitionEnd(active, transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto._transitionComplete = function _transitionComplete(element, active, callback) {\n      if (active) {\n        active.classList.remove(CLASS_NAME_ACTIVE$5);\n        var dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n        if (dropdownChild) {\n          dropdownChild.classList.remove(CLASS_NAME_ACTIVE$5);\n        }\n\n        if (active.getAttribute('role') === 'tab') {\n          active.setAttribute('aria-selected', false);\n        }\n      }\n\n      element.classList.add(CLASS_NAME_ACTIVE$5);\n\n      if (element.getAttribute('role') === 'tab') {\n        element.setAttribute('aria-selected', true);\n      }\n\n      reflow(element);\n\n      if (element.classList.contains(CLASS_NAME_FADE$4)) {\n        element.classList.add(CLASS_NAME_SHOW$7);\n      }\n\n      if (element.parentNode && element.parentNode.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n        var dropdownElement = element.closest(SELECTOR_DROPDOWN$1);\n\n        if (dropdownElement) {\n          SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE$1).forEach(function (dropdown) {\n            return dropdown.classList.add(CLASS_NAME_ACTIVE$5);\n          });\n        }\n\n        element.setAttribute('aria-expanded', true);\n      }\n\n      if (callback) {\n        callback();\n      }\n    } // Static\n    ;\n\n    Tab.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$c) || new Tab(this);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Tab.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$c);\n    };\n\n    _createClass(Tab, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$c;\n      }\n    }]);\n\n    return Tab;\n  }();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Data Api implementation\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$9, SELECTOR_DATA_TOGGLE$4, function (event) {\n    event.preventDefault();\n    var data = Data.getData(this, DATA_KEY$c) || new Tab(this);\n    data.show();\n  });\n  var $$d = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   * add .tab to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$d) {\n    var JQUERY_NO_CONFLICT$c = $$d.fn[NAME$c];\n    $$d.fn[NAME$c] = Tab.jQueryInterface;\n    $$d.fn[NAME$c].Constructor = Tab;\n\n    $$d.fn[NAME$c].noConflict = function () {\n      $$d.fn[NAME$c] = JQUERY_NO_CONFLICT$c;\n      return Tab.jQueryInterface;\n    };\n  }\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Constants\r\n   * ------------------------------------------------------------------------\r\n   */\n\n\n  var NAME$d = 'toast';\n  var VERSION$d = '3.2.2';\n  var DATA_KEY$d = 'coreui.toast';\n  var EVENT_KEY$d = \".\" + DATA_KEY$d;\n  var EVENT_CLICK_DISMISS$1 = \"click.dismiss\" + EVENT_KEY$d;\n  var EVENT_HIDE$4 = \"hide\" + EVENT_KEY$d;\n  var EVENT_HIDDEN$4 = \"hidden\" + EVENT_KEY$d;\n  var EVENT_SHOW$4 = \"show\" + EVENT_KEY$d;\n  var EVENT_SHOWN$4 = \"shown\" + EVENT_KEY$d;\n  var CLASS_NAME_FADE$5 = 'fade';\n  var CLASS_NAME_HIDE = 'hide';\n  var CLASS_NAME_SHOW$8 = 'show';\n  var CLASS_NAME_SHOWING = 'showing';\n  var DefaultType$9 = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  var Default$a = {\n    animation: true,\n    autohide: true,\n    delay: 5000\n  };\n  var SELECTOR_DATA_DISMISS$1 = '[data-dismiss=\"toast\"]';\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * Class Definition\r\n   * ------------------------------------------------------------------------\r\n   */\n\n  var Toast = /*#__PURE__*/function () {\n    function Toast(element, config) {\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._timeout = null;\n\n      this._setListeners();\n\n      Data.setData(element, DATA_KEY$d, this);\n    } // Getters\n\n\n    var _proto = Toast.prototype; // Public\n\n    _proto.show = function show() {\n      var _this = this;\n\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._clearTimeout();\n\n      if (this._config.animation) {\n        this._element.classList.add(CLASS_NAME_FADE$5);\n      }\n\n      var complete = function complete() {\n        _this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        _this._element.classList.add(CLASS_NAME_SHOW$8);\n\n        EventHandler.trigger(_this._element, EVENT_SHOWN$4);\n\n        if (_this._config.autohide) {\n          _this._timeout = setTimeout(function () {\n            _this.hide();\n          }, _this._config.delay);\n        }\n      };\n\n      this._element.classList.remove(CLASS_NAME_HIDE);\n\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      if (this._config.animation) {\n        var transitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, complete);\n        emulateTransitionEnd(this._element, transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      if (!this._element.classList.contains(CLASS_NAME_SHOW$8)) {\n        return;\n      }\n\n      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      var complete = function complete() {\n        _this2._element.classList.add(CLASS_NAME_HIDE);\n\n        EventHandler.trigger(_this2._element, EVENT_HIDDEN$4);\n      };\n\n      this._element.classList.remove(CLASS_NAME_SHOW$8);\n\n      if (this._config.animation) {\n        var transitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, complete);\n        emulateTransitionEnd(this._element, transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      this._clearTimeout();\n\n      if (this._element.classList.contains(CLASS_NAME_SHOW$8)) {\n        this._element.classList.remove(CLASS_NAME_SHOW$8);\n      }\n\n      EventHandler.off(this._element, EVENT_CLICK_DISMISS$1);\n      Data.removeData(this._element, DATA_KEY$d);\n      this._element = null;\n      this._config = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$a), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});\n      typeCheckConfig(NAME$d, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this3 = this;\n\n      EventHandler.on(this._element, EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function () {\n        return _this3.hide();\n      });\n    };\n\n    _proto._clearTimeout = function _clearTimeout() {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n    } // Static\n    ;\n\n    Toast.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$d);\n\n        var _config = _typeof(config) === 'object' && config;\n\n        if (!data) {\n          data = new Toast(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](this);\n        }\n      });\n    };\n\n    Toast.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$d);\n    };\n\n    _createClass(Toast, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$d;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$9;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$a;\n      }\n    }]);\n\n    return Toast;\n  }();\n\n  var $$e = getjQuery();\n  /**\r\n   * ------------------------------------------------------------------------\r\n   * jQuery\r\n   * ------------------------------------------------------------------------\r\n   *  add .toast to jQuery only if jQuery is present\r\n   */\n\n  /* istanbul ignore if */\n\n  if ($$e) {\n    var JQUERY_NO_CONFLICT$d = $$e.fn[NAME$d];\n    $$e.fn[NAME$d] = Toast.jQueryInterface;\n    $$e.fn[NAME$d].Constructor = Toast;\n\n    $$e.fn[NAME$d].noConflict = function () {\n      $$e.fn[NAME$d] = JQUERY_NO_CONFLICT$d;\n      return Toast.jQueryInterface;\n    };\n  }\n  /* eslint-disable unicorn/no-abusive-eslint-disable */\n\n  /* eslint-disable */\n  // Production steps of ECMA-262, Edition 6, 22.1.2.1\n  // Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from\n\n\n  if (!Array.from) {\n    Array.from = function () {\n      var toStr = Object.prototype.toString;\n\n      var isCallable = function isCallable(fn) {\n        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n      };\n\n      var toInteger = function toInteger(value) {\n        var number = Number(value);\n\n        if (isNaN(number)) {\n          return 0;\n        }\n\n        if (number === 0 || !isFinite(number)) {\n          return number;\n        }\n\n        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n      };\n\n      var maxSafeInteger = Math.pow(2, 53) - 1;\n\n      var toLength = function toLength(value) {\n        var len = toInteger(value);\n        return Math.min(Math.max(len, 0), maxSafeInteger);\n      }; // The length property of the from method is 1.\n\n\n      return function from(arrayLike\n      /*, mapFn, thisArg */\n      ) {\n        // 1. Let C be the this value.\n        var C = this; // 2. Let items be ToObject(arrayLike).\n\n        var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n        if (arrayLike == null) {\n          throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n        } // 4. If mapfn is undefined, then let mapping be false.\n\n\n        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n        var T;\n\n        if (typeof mapFn !== 'undefined') {\n          // 5. else\n          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n          if (!isCallable(mapFn)) {\n            throw new TypeError('Array.from: when provided, the second argument must be a function');\n          } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n          if (arguments.length > 2) {\n            T = arguments[2];\n          }\n        } // 10. Let lenValue be Get(items, \"length\").\n        // 11. Let len be ToLength(lenValue).\n\n\n        var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n        // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.\n        // 14. a. Else, Let A be ArrayCreate(len).\n\n        var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n        var k = 0; // 17. Repeat, while k < len‚Ä¶ (also steps a - h)\n\n        var kValue;\n\n        while (k < len) {\n          kValue = items[k];\n\n          if (mapFn) {\n            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n          } else {\n            A[k] = kValue;\n          }\n\n          k += 1;\n        } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n        A.length = len; // 20. Return A.\n\n        return A;\n      };\n    }();\n  }\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (el.matches(s)) return el;\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    };\n  }\n\n  (function () {\n    if (typeof window.CustomEvent === \"function\") return false;\n\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: null\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    window.CustomEvent = CustomEvent;\n  })();\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s);\n      var i = matches.length; // eslint-disable-next-line no-empty\n\n      while (--i >= 0 && matches.item(i) !== this) {}\n\n      return i > -1;\n    };\n  } // https://tc39.github.io/ecma262/#sec-array.prototype.find\n\n\n  if (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n      value: function value(predicate) {\n        // 1. Let O be ? ToObject(this value).\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        var thisArg = arguments[1]; // 5. Let k be 0.\n\n        var k = 0; // 6. Repeat, while k < len\n\n        while (k < len) {\n          // a. Let Pk be ! ToString(k).\n          // b. Let kValue be ? Get(O, Pk).\n          // c. Let testResult be ToBoolean(? Call(predicate, T, ¬´ kValue, k, O ¬ª)).\n          // d. If testResult is true, return kValue.\n          var kValue = o[k];\n\n          if (predicate.call(thisArg, kValue, k, o)) {\n            return kValue;\n          } // e. Increase k by 1.\n\n\n          k++;\n        } // 7. Return undefined.\n\n\n        return undefined;\n      }\n    });\n  }\n\n  if (typeof Object.assign != 'function') {\n    Object.assign = function (target, varArgs) {\n      if (target == null) {\n        // TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {\n          // Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n\n      return to;\n    };\n  }\n\n  (function (global, factory) {\n    ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n  })(undefined, function () {\n    /**\r\n     * @this {Promise}\r\n     */\n    function finallyConstructor(callback) {\n      var constructor = this.constructor;\n      return this.then(function (value) {\n        // @ts-ignore\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        // @ts-ignore\n        return constructor.resolve(callback()).then(function () {\n          // @ts-ignore\n          return constructor.reject(reason);\n        });\n      });\n    } // Store setTimeout reference so promise-polyfill will be unaffected by\n    // other code modifying setTimeout (like sinon.useFakeTimers())\n\n\n    var setTimeoutFunc = setTimeout;\n\n    function isArray(x) {\n      return Boolean(x && typeof x.length !== 'undefined');\n    }\n\n    function noop() {} // Polyfill for Function.prototype.bind\n\n\n    function bind(fn, thisArg) {\n      return function () {\n        fn.apply(thisArg, arguments);\n      };\n    }\n    /**\r\n     * @constructor\r\n     * @param {Function} fn\r\n     */\n\n\n    function Promise(fn) {\n      if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');\n      if (typeof fn !== 'function') throw new TypeError('not a function');\n      /** @type {!number} */\n\n      this._state = 0;\n      /** @type {!boolean} */\n\n      this._handled = false;\n      /** @type {Promise|undefined} */\n\n      this._value = undefined;\n      /** @type {!Array<!Function>} */\n\n      this._deferreds = [];\n      doResolve(fn, this);\n    }\n\n    function handle(self, deferred) {\n      while (self._state === 3) {\n        self = self._value;\n      }\n\n      if (self._state === 0) {\n        self._deferreds.push(deferred);\n\n        return;\n      }\n\n      self._handled = true;\n\n      Promise._immediateFn(function () {\n        var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n\n        if (cb === null) {\n          (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n          return;\n        }\n\n        var ret;\n\n        try {\n          ret = cb(self._value);\n        } catch (e) {\n          reject(deferred.promise, e);\n          return;\n        }\n\n        resolve(deferred.promise, ret);\n      });\n    }\n\n    function resolve(self, newValue) {\n      try {\n        // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n        if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n\n        if (newValue && (_typeof(newValue) === 'object' || typeof newValue === 'function')) {\n          var then = newValue.then;\n\n          if (newValue instanceof Promise) {\n            self._state = 3;\n            self._value = newValue;\n            finale(self);\n            return;\n          } else if (typeof then === 'function') {\n            doResolve(bind(then, newValue), self);\n            return;\n          }\n        }\n\n        self._state = 1;\n        self._value = newValue;\n        finale(self);\n      } catch (e) {\n        reject(self, e);\n      }\n    }\n\n    function reject(self, newValue) {\n      self._state = 2;\n      self._value = newValue;\n      finale(self);\n    }\n\n    function finale(self) {\n      if (self._state === 2 && self._deferreds.length === 0) {\n        Promise._immediateFn(function () {\n          if (!self._handled) {\n            Promise._unhandledRejectionFn(self._value);\n          }\n        });\n      }\n\n      for (var i = 0, len = self._deferreds.length; i < len; i++) {\n        handle(self, self._deferreds[i]);\n      }\n\n      self._deferreds = null;\n    }\n    /**\r\n     * @constructor\r\n     */\n\n\n    function Handler(onFulfilled, onRejected, promise) {\n      this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n      this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n      this.promise = promise;\n    }\n    /**\r\n     * Take a potentially misbehaving resolver function and make sure\r\n     * onFulfilled and onRejected are only called once.\r\n     *\r\n     * Makes no guarantees about asynchrony.\r\n     */\n\n\n    function doResolve(fn, self) {\n      var done = false;\n\n      try {\n        fn(function (value) {\n          if (done) return;\n          done = true;\n          resolve(self, value);\n        }, function (reason) {\n          if (done) return;\n          done = true;\n          reject(self, reason);\n        });\n      } catch (ex) {\n        if (done) return;\n        done = true;\n        reject(self, ex);\n      }\n    }\n\n    Promise.prototype['catch'] = function (onRejected) {\n      return this.then(null, onRejected);\n    };\n\n    Promise.prototype.then = function (onFulfilled, onRejected) {\n      // @ts-ignore\n      var prom = new this.constructor(noop);\n      handle(this, new Handler(onFulfilled, onRejected, prom));\n      return prom;\n    };\n\n    Promise.prototype['finally'] = finallyConstructor;\n\n    Promise.all = function (arr) {\n      return new Promise(function (resolve, reject) {\n        if (!isArray(arr)) {\n          return reject(new TypeError('Promise.all accepts an array'));\n        }\n\n        var args = Array.prototype.slice.call(arr);\n        if (args.length === 0) return resolve([]);\n        var remaining = args.length;\n\n        function res(i, val) {\n          try {\n            if (val && (_typeof(val) === 'object' || typeof val === 'function')) {\n              var then = val.then;\n\n              if (typeof then === 'function') {\n                then.call(val, function (val) {\n                  res(i, val);\n                }, reject);\n                return;\n              }\n            }\n\n            args[i] = val;\n\n            if (--remaining === 0) {\n              resolve(args);\n            }\n          } catch (ex) {\n            reject(ex);\n          }\n        }\n\n        for (var i = 0; i < args.length; i++) {\n          res(i, args[i]);\n        }\n      });\n    };\n\n    Promise.resolve = function (value) {\n      if (value && _typeof(value) === 'object' && value.constructor === Promise) {\n        return value;\n      }\n\n      return new Promise(function (resolve) {\n        resolve(value);\n      });\n    };\n\n    Promise.reject = function (value) {\n      return new Promise(function (resolve, reject) {\n        reject(value);\n      });\n    };\n\n    Promise.race = function (arr) {\n      return new Promise(function (resolve, reject) {\n        if (!isArray(arr)) {\n          return reject(new TypeError('Promise.race accepts an array'));\n        }\n\n        for (var i = 0, len = arr.length; i < len; i++) {\n          Promise.resolve(arr[i]).then(resolve, reject);\n        }\n      });\n    }; // Use polyfill for setImmediate for performance gains\n\n\n    Promise._immediateFn = // @ts-ignore\n    typeof setImmediate === 'function' && function (fn) {\n      // @ts-ignore\n      setImmediate(fn);\n    } || function (fn) {\n      setTimeoutFunc(fn, 0);\n    };\n\n    Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n      if (typeof console !== 'undefined' && console) {\n        console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n      }\n    };\n    /** @suppress {undefinedVars} */\n\n\n    var globalNS = function () {\n      // the only reliable means to get the global object is\n      // `Function('return this')()`\n      // However, this causes CSP violations in Chrome apps.\n      if (typeof self !== 'undefined') {\n        return self;\n      }\n\n      if (typeof window !== 'undefined') {\n        return window;\n      }\n\n      if (typeof __webpack_require__.g !== 'undefined') {\n        return __webpack_require__.g;\n      }\n\n      throw new Error('unable to locate global object');\n    }();\n\n    if (!('Promise' in globalNS)) {\n      globalNS['Promise'] = Promise;\n    } else if (!globalNS.Promise.prototype['finally']) {\n      globalNS.Promise.prototype['finally'] = finallyConstructor;\n    }\n  });\n\n  (function () {\n    if (typeof window.CustomEvent === \"function\" || // In Safari, typeof CustomEvent == 'object' but it otherwise works fine\n    this.CustomEvent.toString().indexOf('CustomEventConstructor') > -1) {\n      return;\n    }\n\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    window.CustomEvent = CustomEvent;\n  })();\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI (v3.4.0): index.umd.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\n\n\n  var index_umd = {\n    AsyncLoad: AsyncLoad,\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    ClassToggler: ClassToggler,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Popover: Popover,\n    Scrollspy: ScrollSpy,\n    Sidebar: Sidebar,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip\n  };\n  return index_umd;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/coreui.bundle.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/coreui.bundle.js");
/******/ 	
/******/ })()
;